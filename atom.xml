<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随笔</title>
  
  <subtitle>技术 | 生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrzzcn.github.io/"/>
  <updated>2019-07-22T15:02:51.954Z</updated>
  <id>https://mrzzcn.github.io/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://mrzzcn.github.io/2019/07/20/react-redux-1-connect/"/>
    <id>https://mrzzcn.github.io/2019/07/20/react-redux-1-connect/</id>
    <published>2019-07-20T07:15:29.000Z</published>
    <updated>2019-07-22T15:02:51.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-缘起"><a href="#0-缘起" class="headerlink" title="0 缘起"></a>0 缘起</h1><p>之前有次面试被问起 <code>connect</code> 方法是如何把 store 的 state 传递到 Component 的，当时没有回答到点子上，拖到现在终于强迫自己坐下来搞清楚这个事情。</p><h1 id="1-API"><a href="#1-API" class="headerlink" title="1 API"></a>1 API</h1><p>先看看官方文档关于 connect() 方法的说明：<a href="https://react-redux.js.org/api/connect" target="_blank" rel="noopener">Connect · React Redux</a> | <a href="https://cn.redux.js.org/docs/react-redux/api.html#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="noopener">中文版</a></p><p>大概翻译一下：<br><code>connect()</code> 方法把一个 React 组件绑定到 Redux store 上。<br>方法返回一个新组件，新组件包含所有传入组件需要从 store 上获取的数据或者向 store 触发的方法<br>connect 不会修改组件，而是返回一个新的<strong>绑定组件</strong>包裹原组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps?, mapDispatchToProps?, mergeProps?, options?</span>)</span></span><br></pre></td></tr></table></figure></p><p>更多内容请参考官方文档。</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><p>那么 <code>connect</code> 底层是如何实现的呢？<br>通过源码看一下:<br>源代码位于：<a href="https://github.com/reduxjs/react-redux/blob/master/src/connect/connect.js#L104" target="_blank" rel="noopener">github.com/reduxjs/react-redux/connect/connect.js</a><br>这里对 <code>connect</code> 的参数进行了一个默认值处理，没有涉及核心功能，继续调用了 <code>connectAdvanced</code>：<br><a href="https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L47" target="_blank" rel="noopener">github.com/reduxjs/react-redux/components/connectAdvanced.js</a><br>方法很长，前面都是对一些过期选项的警告和一些值的处理。核心代码位于 <code>ConnectFunction</code> 内部<br>第 171 行处 获取到当前使用的 context<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ContextToUse = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.</span></span><br><span class="line">    <span class="comment">// Memoize the check that determines which context instance we should use.</span></span><br><span class="line">    <span class="keyword">return</span> propsContext &amp;&amp;</span><br><span class="line">      propsContext.Consumer &amp;&amp;</span><br><span class="line">      isContextConsumer(<span class="xml"><span class="tag">&lt;<span class="name">propsContext.Consumer</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml">      ? propsContext</span></span><br><span class="line"><span class="xml">      : Context</span></span><br><span class="line"><span class="xml">  &#125;, [propsContext, Context])</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// Retrieve the store and ancestor subscription via context, if available</span></span><br><span class="line"><span class="xml">const contextValue = useContext(ContextToUse)</span></span><br></pre></td></tr></table></figure></p><p>第 385 行处，执行了具体的 <code>connect</code> 过程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Now that all that's done, we can finally try to actually render the child component.</span></span><br><span class="line">  <span class="comment">// We memoize the elements for the rendered child component as an optimization.</span></span><br><span class="line">  <span class="keyword">const</span> renderedWrappedComponent = useMemo(</span><br><span class="line">    () =&gt; <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...actualChildProps</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;forwardedRef&#125;</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">    [forwardedRef, WrappedComponent, actualChildProps]</span></span><br><span class="line"><span class="xml">  )</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // If React sees the exact same element reference as last time, it bails out of re-rendering</span></span><br><span class="line"><span class="xml">  // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.</span></span><br><span class="line"><span class="xml">  const renderedChild = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">    if (shouldHandleStateChanges) &#123;</span></span><br><span class="line"><span class="xml">      // If this component is subscribed to store updates, we need to pass its own</span></span><br><span class="line"><span class="xml">      // subscription instance down to our descendants. That means rendering the same</span></span><br><span class="line"><span class="xml">      // Context instance, and putting a different value into the context.</span></span><br><span class="line"><span class="xml">      return (</span></span><br><span class="line">        &lt;ContextToUse.Provider value=&#123;overriddenContextValue&#125;&gt;</span><br><span class="line">          &#123;renderedWrappedComponent&#125;</span><br><span class="line">        &lt;/ContextToUse.Provider&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return renderedWrappedComponent</span><br><span class="line">  &#125;, [ContextToUse, renderedWrappedComponent, overriddenContextValue])</span><br><span class="line"></span><br><span class="line">  return renderedChild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，其实底层就是使用 Context.Provider 向被绑定的组件注入需要的属性(包括 mapStateToProps 和 dispatch相关方法)。</p><h1 id="3-踩坑"><a href="#3-踩坑" class="headerlink" title="3 踩坑"></a>3 踩坑</h1><p>最初看代码的时候搞不清楚 <code>ReactReduxContext</code> 这个 Context 是如何跟外层的 store 关联起来的，因为漏掉了最外层的 <code>Provider</code> <a href="https://react-redux.js.org/api/provider" target="_blank" rel="noopener">https://react-redux.js.org/api/provider</a>。<br>react-redux 提供两种引用方式：在最外层使用 react-redux 提供的 Provider 组件包裹 或者 每次 connect 时候都要传入 context 实例的方式，以此保证唯一数据源。</p><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h1><p>整个实现过程非常巧妙，包括一些默认值的处理，一些方法重载的实现，非常值得参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-缘起&quot;&gt;&lt;a href=&quot;#0-缘起&quot; class=&quot;headerlink&quot; title=&quot;0 缘起&quot;&gt;&lt;/a&gt;0 缘起&lt;/h1&gt;&lt;p&gt;之前有次面试被问起 &lt;code&gt;connect&lt;/code&gt; 方法是如何把 store 的 state 传递到 Compon
      
    
    </summary>
    
      <category term="React" scheme="https://mrzzcn.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://mrzzcn.github.io/tags/React/"/>
    
      <category term="React Redux" scheme="https://mrzzcn.github.io/tags/React-Redux/"/>
    
      <category term="connect" scheme="https://mrzzcn.github.io/tags/connect/"/>
    
  </entry>
  
  <entry>
    <title>使用 Heroku 和 mongoDB Atlas 免费托管 YApi</title>
    <link href="https://mrzzcn.github.io/2019/04/27/host-yapi-with-heroku-and-mongodb-atlas/"/>
    <id>https://mrzzcn.github.io/2019/04/27/host-yapi-with-heroku-and-mongodb-atlas/</id>
    <published>2019-04-27T01:56:48.000Z</published>
    <updated>2019-04-27T04:50:27.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><p>前端开发过程中，与后端约定接口标准之后，双方同时开始开发，可能会出现后端没有 Ready，但是前端已经需要使用接口的情况。这时候就需要 Fake 接口。有几种方式：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1. 项目中使用 Fake Promise</td><td>方便快速</td><td>不能模拟真实网络请求，对代码有侵入，需要在 webpack 中配置路径替换或手动切换文件</td></tr><tr><td>2. 项目中使用 mockjs 等服务端方式启动自托管 mock server</td><td>方便快速，真实网络请求</td><td>增加项目体积，不利于多项目共享基础设施，耗费开发服务器性能</td></tr><tr><td>3. 使用单独的 mock server</td><td>真实网络请求，可集成后端接口测试，TS 代码模板等功能</td><td>需要花稍多时间维护接口</td></tr></tbody></table><p>这里介绍一下使用第三种方式的一个实现方法：<strong>YApi</strong>，可以去<a href="http://yapi.demo.qunar.com/" target="_blank" rel="noopener">这里</a>体验。<br>YApi 是 node + mongoDB 项目，本篇介绍一下自己使用 Heroku 和 mongoDB Atlas 免费部署 YApi 的过程。</p><h2 id="1-注册帐号"><a href="#1-注册帐号" class="headerlink" title="1. 注册帐号"></a>1. 注册帐号</h2><p><a href="https://cloud.mongodb.com/" target="_blank" rel="noopener">https://cloud.mongodb.com/</a> 提供免费的 mongoDB 数据库服务<br><a href="https://www.heroku.com/" target="_blank" rel="noopener">https://www.heroku.com/</a> 提供免费的 node 程序托管服务</p><a id="more"></a><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h2><h3 id="2-1-建立数据库"><a href="#2-1-建立数据库" class="headerlink" title="2.1 建立数据库"></a>2.1 建立数据库</h3><p>登录 <a href="https://cloud.mongodb.com/" target="_blank" rel="noopener">https://cloud.mongodb.com/</a> 创建 sandbox 实例。得到类似<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;username&gt; 为用户名</span></span><br><span class="line"><span class="comment"># &lt;password&gt; 为密码</span></span><br><span class="line"><span class="comment"># 修改结尾处 test =&gt; yapi</span></span><br><span class="line">mongodb+srv://&lt;username&gt;:&lt;password&gt;@xxxx.mongodb.net/yapi?retryWrites=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>的连接字符串。</p><h3 id="2-3-克隆代码"><a href="#2-3-克隆代码" class="headerlink" title="2.3 克隆代码"></a>2.3 克隆代码</h3><p>YApi 源码位于 <code>https://github.com/YMFE/yapi</code> 你可以 Fork 到你自己的仓库，然后克隆。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:YMFE/yapi.git</span><br></pre></td></tr></table></figure></p><h3 id="2-4-修改几行代码适应-Heroku-部署"><a href="#2-4-修改几行代码适应-Heroku-部署" class="headerlink" title="2.4 修改几行代码适应 Heroku 部署"></a>2.4 修改几行代码适应 Heroku 部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yapi</span><br><span class="line"><span class="comment"># 这里使用最新版 1.7.0 ，如果担心最新版有问题也可以切换别的版本</span></span><br><span class="line"><span class="comment"># https://github.com/YMFE/yapi/releases</span></span><br><span class="line">git checkout -b dev v1.7.0 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">cp ./config_example.json ./config.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于 YApi 项目使用 JSON 配置文件，而 JSON 中不能使用环境变量，所以我们这里改为使用 JS 配置文件</span></span><br><span class="line"><span class="comment"># 打开 config.js 在第一行 增加 module.exports = </span></span><br><span class="line"><span class="comment"># 找到 db 段配置</span></span><br><span class="line"><span class="comment">#    添加 connecString 属性，值为 2.1 步得到的字符串</span></span><br><span class="line"><span class="comment">#    修改 user 属性值为 2.1 步的 用户名</span></span><br><span class="line"><span class="comment">#    修改 pass 属性值为 2.1 步的 密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 server/yapi.js 文件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改以下行内容</span></span><br><span class="line">const config = require(<span class="string">'../../config.json'</span>);</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">const config = require(<span class="string">'../config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 ykit.config.js </span></span><br><span class="line">configPlugin = require(<span class="string">'../config.json'</span>).plugins;</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">configPlugin = require(<span class="string">'../config.js'</span>).plugins;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 server/utils/initConfig.js</span></span><br><span class="line"><span class="built_in">let</span> configPath = path.join(runtimePath, <span class="string">'config.json'</span>);</span><br><span class="line"><span class="comment"># =&gt; </span></span><br><span class="line"><span class="built_in">let</span> configPath = path.join(runtimePath, <span class="string">'config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改日志路径，因为 Heroku 根目录为只读路径，不允许程序创建或写入</span></span><br><span class="line">const WEBROOT_LOG = path.join(WEBROOT_RUNTIME, <span class="string">'log'</span>);</span><br><span class="line">=&gt;</span><br><span class="line">const WEBROOT_LOG = path.resolve(__dirname, <span class="string">'log'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-5-初始化数据库"><a href="#2-5-初始化数据库" class="headerlink" title="2.5 初始化数据库"></a>2.5 初始化数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run install-server</span><br><span class="line"><span class="comment"># 出现以下日志，即表示数据库初始化成功</span></span><br><span class="line"><span class="built_in">log</span>: mongodb load success...</span><br><span class="line">初始化管理员账号成功,账号名：<span class="string">"admin@admin.com"</span>，密码：<span class="string">"ymfe.org"</span></span><br></pre></td></tr></table></figure><h3 id="2-6-增加环境变量"><a href="#2-6-增加环境变量" class="headerlink" title="2.6 增加环境变量"></a>2.6 增加环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 config.js</span></span><br><span class="line"><span class="comment"># 修改 port 节点：process.env.PORT</span></span><br><span class="line"><span class="comment"># 因为 Heroku 会提供一个端口用来做转发，应用程序必须通过环境变量获取这个端口并监听，否则应用无法启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 db 节点到以下内容：</span></span><br><span class="line">  <span class="string">"db"</span>: &#123;</span><br><span class="line">    <span class="string">"connectString"</span>: process.env.connectString,</span><br><span class="line">    <span class="string">"servername"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"DATABASE"</span>: <span class="string">"yapi"</span>,</span><br><span class="line">    <span class="string">"port"</span>: 27017,</span><br><span class="line">    <span class="string">"user"</span>: process.env.connectUser,</span><br><span class="line">    <span class="string">"pass"</span>: process.env.connectPass,</span><br><span class="line">    <span class="string">"authSource"</span>: <span class="string">"yapi"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h3><p>登录 <a href="https://dashboard.heroku.com/" target="_blank" rel="noopener">https://dashboard.heroku.com/</a> 创建 app，例如 <code>yapi-demo</code>（已使用，请另外命名），创建完成之后来到项目页面：<a href="https://dashboard.heroku.com/apps/yapi-demo" target="_blank" rel="noopener">https://dashboard.heroku.com/apps/yapi-demo</a></p><h3 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h3><p>点击 Settings -&gt; Reveal Config Vars<br>依次添加：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">connectString:</span> <span class="string">mongodb+srv://&lt;username&gt;:&lt;password&gt;@xxxx.mongodb.net/yapi?retryWrites=true</span></span><br><span class="line"><span class="attr">connectUser:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">connectPass:</span> <span class="string">xxxxx</span></span><br></pre></td></tr></table></figure></p><h3 id="3-3-推送代码"><a href="#3-3-推送代码" class="headerlink" title="3.3 推送代码"></a>3.3 推送代码</h3><p>在项目主页点击 Deploy，根据提示安装 <code>Heroku CLI</code> 并登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd yapi</span></span><br><span class="line"><span class="comment"># 修改 package.json -&gt; engines -&gt; node 为："&gt;= 7.6.0 &lt; 11"</span></span><br><span class="line"><span class="comment"># 因为项目使用了 node-sass. node-sass 的 linux 支持到此版本。</span></span><br><span class="line">heroku git:remote -a yapi-demo</span><br><span class="line">git push heroku dev:master --force</span><br><span class="line"><span class="comment"># 等待服务器处理完成即可</span></span><br></pre></td></tr></table></figure></p><h3 id="3-4-验证部署"><a href="#3-4-验证部署" class="headerlink" title="3.4 验证部署"></a>3.4 验证部署</h3><p>打开 <a href="https://yapi-demo.herokuapp.com/" target="_blank" rel="noopener">https://yapi-demo.herokuapp.com/</a>（当然，你要替换成你自己的应用名）。<br>首次加载可能很慢，有一个超大JS，需要加载一分钟左右（团队需要解决下）。<br>使用先前的用户名和密码登录即可体验。</p><p>你也可以使用 <a href="mailto:demo@demo.com" target="_blank" rel="noopener">demo@demo.com</a>/demo 登录<a href="https://yapi-demo.herokuapp.com/" target="_blank" rel="noopener">YApi Demo</a> 体验，请勿修改密码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0. 背景&quot;&gt;&lt;/a&gt;0. 背景&lt;/h2&gt;&lt;p&gt;前端开发过程中，与后端约定接口标准之后，双方同时开始开发，可能会出现后端没有 Ready，但是前端已经需要使用接口的情况。这时候就需要 Fake 接口。有几种方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. 项目中使用 Fake Promise&lt;/td&gt;
&lt;td&gt;方便快速&lt;/td&gt;
&lt;td&gt;不能模拟真实网络请求，对代码有侵入，需要在 webpack 中配置路径替换或手动切换文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. 项目中使用 mockjs 等服务端方式启动自托管 mock server&lt;/td&gt;
&lt;td&gt;方便快速，真实网络请求&lt;/td&gt;
&lt;td&gt;增加项目体积，不利于多项目共享基础设施，耗费开发服务器性能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. 使用单独的 mock server&lt;/td&gt;
&lt;td&gt;真实网络请求，可集成后端接口测试，TS 代码模板等功能&lt;/td&gt;
&lt;td&gt;需要花稍多时间维护接口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里介绍一下使用第三种方式的一个实现方法：&lt;strong&gt;YApi&lt;/strong&gt;，可以去&lt;a href=&quot;http://yapi.demo.qunar.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;体验。&lt;br&gt;YApi 是 node + mongoDB 项目，本篇介绍一下自己使用 Heroku 和 mongoDB Atlas 免费部署 YApi 的过程。&lt;/p&gt;
&lt;h2 id=&quot;1-注册帐号&quot;&gt;&lt;a href=&quot;#1-注册帐号&quot; class=&quot;headerlink&quot; title=&quot;1. 注册帐号&quot;&gt;&lt;/a&gt;1. 注册帐号&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.mongodb.com/&lt;/a&gt; 提供免费的 mongoDB 数据库服务&lt;br&gt;&lt;a href=&quot;https://www.heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.heroku.com/&lt;/a&gt; 提供免费的 node 程序托管服务&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end" scheme="https://mrzzcn.github.io/categories/Front-end/"/>
    
    
      <category term="Heroku" scheme="https://mrzzcn.github.io/tags/Heroku/"/>
    
      <category term="mongoDB" scheme="https://mrzzcn.github.io/tags/mongoDB/"/>
    
      <category term="YApi" scheme="https://mrzzcn.github.io/tags/YApi/"/>
    
      <category term="development" scheme="https://mrzzcn.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>前端开发基础之 - Webpack</title>
    <link href="https://mrzzcn.github.io/2019/04/13/Front-end-Development-1/"/>
    <id>https://mrzzcn.github.io/2019/04/13/Front-end-Development-1/</id>
    <published>2019-04-13T13:06:03.000Z</published>
    <updated>2019-05-04T08:23:44.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://www.valentinog.com/blog/webpack-tutorial" target="_blank" rel="noopener">https://www.valentinog.com/blog/webpack-tutorial</a></p></blockquote><p>Webpack 4 更新不短时间了，简单做个整理。</p><blockquote><p>本文演示基于仓库：<a href="https://github.com/mrzzcn/webpack-playground" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground</a></p></blockquote><h2 id="1-完全-0-配置的模块化打包利器"><a href="#1-完全-0-配置的模块化打包利器" class="headerlink" title="1. 完全 0 配置的模块化打包利器"></a>1. 完全 0 配置的模块化打包利器</h2><p>习惯了<code>webpack.config.js</code>的同学可能不知道这个变化，Webpack 4 默认不需要配置文件了，在一个没有配置文件的项目里运行<code>webpack</code>会默认查找<code>./src/index.js</code>，输出到<code>./dist/main.js</code>。内部使用了一个默认配置文件主要内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(<span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-0" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-0</a></p></blockquote><a id="more"></a><h2 id="2-mode-production-amp-development"><a href="#2-mode-production-amp-development" class="headerlink" title="2. mode: production &amp; development"></a>2. mode: production &amp; development</h2><p>真实项目中我们经常会有多个配置文件对应多个环境：<br>development: 本地开发环境，需要处理 webpack-dev-server proxy 等配置<br>testing：本地测试<br>stage：beta 环境，替换域名，发布到测试服务器<br>production：生产环境，替换域名，压缩，增加文件指纹更新缓存，发布到 CDN 等</p><p>Webpack 为我们提供 <code>mode</code> 选项用来使用一些默认的配置，有三个值：<code>development</code> | <code>production</code> | <code>none</code>。<br>先看下不添加 <code>mode</code> 时候运行的一个警告：<br><img src="/2019/04/13/Front-end-Development-1/webpack%20mode%20warning.png" title="Webpack mode warning"></p><blockquote><p>动态演示：<a href="https://asciinema.org/a/240832" target="_blank" rel="noopener">https://asciinema.org/a/240832</a></p></blockquote><p>可以看到 Webpack 是必须使用 <code>mode</code> 选项的，如果没有提供，将会使用默认值 <code>production</code>，同时会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>。<br>三个值区别如下：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">development</td><td style="text-align:left">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code>。 启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code>。</td></tr><tr><td style="text-align:center">production</td><td style="text-align:left">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>。 启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>TerserPlugin</code>。</td></tr><tr><td style="text-align:center">none</td><td style="text-align:left">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>none</code>。 退出任何默认优化选项</td></tr></tbody></table><blockquote><p>关于 <code>mode</code> 的更多具体信息，请查阅：<a href="https://webpack.docschina.org/concepts/mode/" target="_blank" rel="noopener">https://webpack.docschina.org/concepts/mode/</a><br>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-1" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-1</a></p></blockquote><h2 id="3-更改默认的入口文件和输出？也可以！"><a href="#3-更改默认的入口文件和输出？也可以！" class="headerlink" title="3. 更改默认的入口文件和输出？也可以！"></a>3. 更改默认的入口文件和输出？也可以！</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack",</span><br><span class="line">  "build:dev": "webpack --mode development ./src/index.js --output ./dist/foo/main.js",</span><br><span class="line">  "build": "webpack --mode production ./src/index.js --output ./dist/bar/main.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-2" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-2</a></p></blockquote><h2 id="4-ES6-with-Babel-7"><a href="#4-ES6-with-Babel-7" class="headerlink" title="4. ES6 with Babel 7"></a>4. ES6 with Babel 7</h2><p>现在写 JS 基本离不开 ES6，使用 ES6 就意味着必须使用编译器。webpack 使用 babel-loader 处理 JS，把 ES6 以上的语法编译到 ES5 适配大多数浏览器。<br>Babel 7 是 Babel 的最新版本，使用之前需要引用以下依赖：</p><ol><li>babel core</li><li>babel loader</li><li>babel preset env</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/core babel-loader @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure><p>在项目根目录增加文件：<code>.babelrc</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"@babel/preset-env"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下一步，有两种方法启用 babel-loader:</p><ul><li>添加配置文件<code>webpack.config.js</code></li><li>使用命令行参数选项<code>--module-bind</code></li></ul><p>webpack4 号称是 <strong>0配置</strong> 的，这里为啥又出来配置文件呢？其实 webpack4 <strong>0配置</strong> 的作用是有限的：</p><ul><li>入口 (entry point)，默认值为：<code>src/index.js</code></li><li>输出 (output)，默认值为：<code>dist/main.js</code></li><li>mode (production or development)</li></ul><p>一般的使用是足够了的，不过如果想要使用自定义的 loader 还是必须创建 config 文件的，源引作者 Sean 的一段回答：</p><blockquote><p>Q: Will loaders in webpack 4 work the same as webpack 3? Is there any plan to provide 0 conf for common loaders like babel-loader?<br>A: “For the future (after v4, maybe 4.x or 5.0), we have already started the exploration of how a preset or addon system will help define this. What we don’t want: To try and shove a bunch of things into core as defaults What we do want: Allow other to extend”</p></blockquote><h3 id="借助配置文件webpack-config-js使用-babel-loader"><a href="#借助配置文件webpack-config-js使用-babel-loader" class="headerlink" title="借助配置文件webpack.config.js使用 babel-loader"></a>借助配置文件<code>webpack.config.js</code>使用 babel-loader</h3><p>按你熟悉的方式添加文件<code>webpack.config.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在 <code>src/index.js</code> 里面添加一些 ES6 代码。重新编译，看看结果是不是和你预想的一样呢？使用这种方式还可以查看 ES6 类的运行机制。</p><h3 id="不添加配置文件启用-babel-loader-的方法"><a href="#不添加配置文件启用-babel-loader-的方法" class="headerlink" title="不添加配置文件启用 babel-loader 的方法"></a>不添加配置文件启用 babel-loader 的方法</h3><p>的确有一种方法可以不需要配置文件，那就是<code>--module-bind</code>选项，这是 webpack3 引入的。<br>删除 <code>webpack.config.js</code>。<br>更改 npm scripts，添加参数：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack",</span><br><span class="line">  "build:dev": "webpack --mode development ./src/index.js --output ./dist/foo/main.js --module-bind js=babel-loader",</span><br><span class="line">  "build": "webpack --mode production ./src/index.js --output ./dist/bar/main.js --module-bind js=babel-loader"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新编译，看和上一步的编译结果是否相同。</p><blockquote><p><em>这种用法会让 编译命令变长从而破坏可读性，了解即可，不推荐在实际项目中使用。</em></p></blockquote><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-3" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-3</a></p></blockquote><h2 id="5-React"><a href="#5-React" class="headerlink" title="5. React"></a>5. React</h2><p>经常有人会说 React 比较重，学习曲线陡峭，其实，如果你使用 ES6 和 babel，配置 React 相当容易：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom --save-dev</span><br><span class="line">npm i @babel/preset-react --save-dev</span><br></pre></td></tr></table></figure></p><p>在<code>.babelrc</code> 中配置 React preset<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>, <span class="string">"@babel/preset-react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完了！<br>如果你更喜欢<code>.jsx</code>后缀名来区分普通纯 JS 文件和 包含 <code>JSX</code> 语法的 React 页面或组件，需要在<code>webpack.config.js</code>文件中配置 JSX 支持：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>, <span class="comment">// 此处增加 jsx 后缀名识别</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>来测试一下，添加文件：<code>./src/App.jsx</code>:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;React here!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure></p><p>在入口文件<code>./src/index.js</code>中添加：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.jsx'</span>;</span><br></pre></td></tr></table></figure></p><p>重新编译，你会发现输出内容变多了不少，因为 React 库被打包进来，不过在文件结尾处，你仍然可以分辨出来我们编写的 React 组件被编译之后的样子。</p><blockquote><p><em>一旦理解了应用程序的本质：数据结构+算法，你会觉得 React 的设计有多么干净、纯粹，你会觉得自己原来使用模板引擎拼凑代码的方式简直像数字时代的原始人。而一旦写到表单部分，你会突然发现做个原始人挺快乐的。。。😂</em></p></blockquote><h3 id="HTML-webpack-plugin"><a href="#HTML-webpack-plugin" class="headerlink" title="HTML webpack plugin"></a>HTML webpack plugin</h3><p>组件需要展示出来，如果想要“看见”，需要把编译的结果呈现在网页上，webpack 使用 <code>html-webpack-plugin</code> 和 <code>html-loader</code> 来处理 HTML 文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin html-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>添加<code>src/index.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 4 quickstart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编辑<code>webpack.config.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebPackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"html-loader"</span>,</span><br><span class="line">            options: &#123; <span class="attr">minimize</span>: <span class="literal">false</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebPackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">      filename: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>重新编译，看一下<code>dist</code>文件夹，应该可以看到编译产生的 html 文件，使用浏览器打开，即可预览刚才编写的 React 组件。<br>无需手动添加 JS 引用，webpack 会把编译输出的 <strong>资源</strong> 自动注入到 Html 文件相应位置。</p><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-4" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-4</a></p></blockquote><h2 id="6-VUE"><a href="#6-VUE" class="headerlink" title="6. VUE"></a>6. VUE</h2><p>VUE 对初学者非常友好，有很多API，几乎你能想到的他全都为你做了。而且官网的文档很详细，各种语言版本都有。重要的是，对于旧项目（非MV**框架的项目）而言，使用 VUE 重构非常方便。<br>在 webpack 项目里使用 VUE也很方便：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue --save-dev</span><br></pre></td></tr></table></figure></p><p>修改 <code>./src/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>修改<code>webpack.config.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    vue$: <span class="string">"vue/dist/vue.esm.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>关于 VUE 的 不同构建版本的解释 请移步：<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" target="_blank" rel="noopener">不同构建版本的解释</a></p></blockquote><p>重新编译，刷新预览，可以看到 VUE 实例已经注入到页面中。</p><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-5" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-5</a></p></blockquote><h2 id="7-CSS"><a href="#7-CSS" class="headerlink" title="7. CSS"></a>7. CSS</h2><p>webpack 默认不会吧 CSS 内容提取到单独的 css 文件里。之前我们用 <code>extract-text-webpack-plugin</code> 做这件事，不幸的是 这个插件对 webpack4 的支持并不十分友好。</p><blockquote><p>Michael Ciniawsky: <strong>extract-text-webpack-plugin</strong> <em>reached a point where maintaining it become too much of a burden and it’s not the first time upgrading a major webpack version was complicated and cumbersome due to issues with it.</em></p></blockquote><p>不过不用着急，我们有 <code>mini-css-extract-plugin</code>（需要 webpack 4.2.X 以上）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin css-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>添加 loader 和 提取插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebPackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            options: &#123; <span class="attr">minimize</span>: <span class="literal">false</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      vue$: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebPackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'./index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[name].[id].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>添加 css 文件<code>src/main.css</code>:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 <code>src/index.js</code>中引入 css 文件：<code>import &#39;./main.css&#39;;</code><br>重新编译，刷新预览，你会发现页面文字变得更高，背景也变成更清新的绿色。</p><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-6" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-6</a></p></blockquote><h2 id="8-webpack-dev-server"><a href="#8-webpack-dev-server" class="headerlink" title="8. webpack dev server"></a>8. webpack dev server</h2><p>每次更改代码都要重新编译，手动刷新，是不是很烦，使用 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack dev server</a>启动开发服务器，可以大大方便我们的开发调试过程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>修改 npm scripts:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --mode development --open", // 使用 webpack-dev-server 启动开发服务器</span><br><span class="line">  "build:dev": "webpack --mode development",</span><br><span class="line">  "build": "webpack --mode production"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>终端启动 <code>npm start</code> 。<br>webpack 会启动开发服务器并在默认浏览器中打开预览页面，随意更改源代码，稍等几秒页面即可自动刷新。</p><blockquote><p>源码：<a href="https://github.com/mrzzcn/webpack-playground/tree/step-7" target="_blank" rel="noopener">https://github.com/mrzzcn/webpack-playground/tree/step-7</a></p></blockquote><h2 id="9-Proxy"><a href="#9-Proxy" class="headerlink" title="9. Proxy"></a>9. Proxy</h2><p>前端开发中，经常会遇到多端同步开始的情况。比如，需求定下来之后，设计、前端、后端都开始工作，前、后端依赖与共同约定的接口开发，最后双方都 Ready 再联调。后端在开发过程中可以使用浏览器、Postman、CURL等工具发起请求进行测试。但是前端在没有后端接口的情况下也要继续工作，这时候就需要模拟后端接口。<br>修改<code>webpack.config.js</code>，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加以下节点：</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://yapi-demo.herokuapp.com/mock/16'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123; <span class="string">'^/api'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">      toProxy: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改 <code>src/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue !'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toTimeString(),</span><br><span class="line">    posts: []</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    fetch(<span class="string">'/api/posts'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.posts = posts;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">  &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;hr/&gt;</span></span><br><span class="line"><span class="string">  Total &#123;&#123;posts.length&#125;&#125; posts: </span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li v-for="post in posts" key=&#123;&#123;post.id&#125;&#125;&gt;&#123;&#123;post.title&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>保存，重新启动开发服务器。<br>在打开的浏览器窗口中可以预览利用 mock server 模拟后端接口的应用程序预览。</p><blockquote><p>关于代理服务器 <code>https://yapi-demo.herokuapp.com/mock/16</code> 的搭建，可以参考：<a href="https://mrzzcn.github.io/2019/04/27/host-yapi-with-heroku-and-mongodb-atlas/">使用 Heroku 和 mongoDB Atlas 免费托管 YApi</a> 和 <a href="https://yapi.ymfe.org/" target="_blank" rel="noopener">YApi 官网</a><br>YApi 是我见过最优秀的 Api 管理软件，同类软件还有 zan-proxy 和 nei 等，不过功能相对较弱。后面我会写文章继续介绍 YApi 的高级用法，包括数据模拟、动态期望、集成对后端Api的自动化测试等。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.valentinog.com/blog/webpack-tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.valentinog.com/blog/webpack-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Webpack 4 更新不短时间了，简单做个整理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文演示基于仓库：&lt;a href=&quot;https://github.com/mrzzcn/webpack-playground&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mrzzcn/webpack-playground&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-完全-0-配置的模块化打包利器&quot;&gt;&lt;a href=&quot;#1-完全-0-配置的模块化打包利器&quot; class=&quot;headerlink&quot; title=&quot;1. 完全 0 配置的模块化打包利器&quot;&gt;&lt;/a&gt;1. 完全 0 配置的模块化打包利器&lt;/h2&gt;&lt;p&gt;习惯了&lt;code&gt;webpack.config.js&lt;/code&gt;的同学可能不知道这个变化，Webpack 4 默认不需要配置文件了，在一个没有配置文件的项目里运行&lt;code&gt;webpack&lt;/code&gt;会默认查找&lt;code&gt;./src/index.js&lt;/code&gt;，输出到&lt;code&gt;./dist/main.js&lt;/code&gt;。内部使用了一个默认配置文件主要内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: &lt;span class=&quot;string&quot;&gt;&#39;./src/index.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: path.resolve(&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;main.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/mrzzcn/webpack-playground/tree/step-0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mrzzcn/webpack-playground/tree/step-0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Technology/"/>
    
      <category term="Front-end" scheme="https://mrzzcn.github.io/categories/Technology/Front-end/"/>
    
    
      <category term="Front-end" scheme="https://mrzzcn.github.io/tags/Front-end/"/>
    
      <category term="Development" scheme="https://mrzzcn.github.io/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>强化网站安全 - 第一篇：安全相关的Headers (Hardening Website Security – Part 1: HTTP Security Headers)</title>
    <link href="https://mrzzcn.github.io/2019/01/11/HTTP-Security-Headers/"/>
    <id>https://mrzzcn.github.io/2019/01/11/HTTP-Security-Headers/</id>
    <published>2019-01-11T07:40:44.000Z</published>
    <updated>2019-04-27T01:43:35.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://int64software.com/blog/2018/11/05/hardening-website-security-part-1-http-security-headers/" target="_blank" rel="noopener">Hardening Website Security – Part 1: HTTP Security Headers</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>感觉每周都会出现新的个人信息被盗事件，原因是某一家公司网站被<strong>黑</strong>了。   </p><p>大部分攻击都是通过社会工程学诱骗某些用户主动提交一些信息，黑客借助这些信息获取更高权限并最终获取个人资料。   </p><p>如果你想要在21世纪运营一个安全的网站，你需要遵循一些安全准则，我会写一个系列专栏说明这些安全准则，这是第一篇。<br><a id="more"></a></p><h2 id="本文不会介绍以下内容"><a href="#本文不会介绍以下内容" class="headerlink" title="本文不会介绍以下内容"></a>本文不会介绍以下内容</h2><p>因为网络基础架构的安全配置内容太多（自托管或者VPS，OS，管理中台，防火墙等）而且细微差异众多，我不会在这个系列中介绍。我可能后面会专门写相关文章介绍那些内容。</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><blockquote><p>文章内容来自于我多年的工作经验、尝试，以及（频繁）犯错的总结。在正常经营的网站忽略<code>HTTP headers</code> 设置（极有）可能导致一些意外的甚至是灾难性的后果。本文所写内容都是个人依据自身知识水平总结的最佳实践，但是涉及到<strong>安全</strong>问题，我强烈建议读者在对你自己的系统或网站做任何改动之前确保你知道自己在干什么以及这么干的后果。本文所有的代码仅作示例展示，可能并不完善甚至有一些错误。读者从网页上拷贝粘贴使用代码时需要格外小心，<abbr title="指原文发表平台 int64software">这个网站</abbr>也包含在内。<abbr title="指原文发表平台所属公司">Int64 Software Ltd</abbr>公司所有员工与企业法人代表不对因故意或无意误用其帖子和文章中所提供信息而造成的损害承担任何责任。   </p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当Web服务器接收一个标准的 HTTP Get 请求之后，它会把请求的资源和一些Header信息一起返回。这对于浏览器如何处理响应数据来说是必要的，比如资源的编码，内容长度等。</p><p>第一篇我们先来看一下安全相关的 Header有哪些，他们的作用以及如何设置他们。</p><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>网站托管环境不同，设置Header的方法不同。下面是一些常用的比较流行的服务器软件/编程语言的Header配置方法。</p><h3 id="Apache-Web-Server"><a href="#Apache-Web-Server" class="headerlink" title="Apache Web Server"></a>Apache Web Server</h3><p>Apache的虚拟主机配置文件位于<code>.htaccess</code> 或<code>.httpd.conf</code>，使用以下指令设置：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set <span class="string">[HeaderName]</span> <span class="string">[HeaderValue]</span></span><br></pre></td></tr></table></figure></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>在Nginx 的<code>config</code> 目录下，打开<code>nginx.conf</code>，添加以下内容：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_header </span>[HeaderName] <span class="string">"[HeaderValue]"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><p>(译者加: 在每个虚拟主机目录下)打开<code>Web.Config</code>文件，在<code>&lt;system.webServer&gt;</code>节点下添加<code>&lt;customHeaders&gt;</code>节点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"[HeaderName]"</span> <span class="attr">value</span>=<span class="string">"[HeaderValue]"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>PHP 可以在文件顶部（在任意输出内容设置之前，包括空白）使用<code>header</code> 方法设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'[HeaderName]: [HeaderValue]'</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>备注：一个请求只需要设置一次Header，不需要在每个包含的PHP文件里面配置。<code>true</code> 表示会覆盖已存在的同名 Header 。</p></blockquote><h3 id="Asp-Net"><a href="#Asp-Net" class="headerlink" title="Asp.Net"></a><span>Asp.Net</span></h3><p>在<code>global.asax</code> 文件增加以下代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_BeginRequest</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HttpContext.Current.Response.AddHeader(<span class="string">"[HeaderName]"</span>, <span class="string">"[HeaderValue]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><h3 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h3><p><code>X-Frame-Options</code>用来防止 <strong>点击劫持</strong>，点击劫持指的是攻击者试图在用户浏览/使用网页过程中在诸如点击按钮等事件中执行一些非预期的操作。其中常见的一种攻击方式是 攻击者在他们自己的钓鱼网站上通过<code>iframe</code> 嵌入你的网页，然后在界面上覆盖一个透明的区域，用户以为在浏览你的网页，其实用户提交的信息已经被攻击者盗取。<br>通过设置<code>X-Frame-Options</code> 你可以告诉浏览器当前网页不允许通过<code>iframe</code> 加载。<br>该选项有三个可选值：</p><h4 id="DENY"><a href="#DENY" class="headerlink" title="DENY"></a>DENY</h4><p>设置为<code>DENY</code>可以阻止任何其他网页通过<code>iframe</code>嵌入你的网页。除非你的网页明确需要被嵌入，否则请设置为这个值。</p><h4 id="SAMEORIGIN"><a href="#SAMEORIGIN" class="headerlink" title="SAMEORIGIN"></a>SAMEORIGIN</h4><p>设置为<code>SAMEORIGIN</code>会允许你自己的网站（同一域名），但是会阻止其他域（包括其他子域）嵌入你的网页。</p><h4 id="ALLOW-FROM-lt-uri-gt"><a href="#ALLOW-FROM-lt-uri-gt" class="headerlink" title="ALLOW-FROM &lt;uri\&gt;"></a>ALLOW-FROM &lt;uri\&gt;</h4><p>这种方式将阻止除指定URI以外的其他所有网页使用iframe加载当前网页(比如<code>ALLOW-FROM https://myothersite.com</code>)。</p><blockquote><p>注意：该选项的浏览器支持性有限</p></blockquote><h4 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>X-Frame-Options 应当总是设置为<code>DENY</code>，除非有明确的需要配置为其他值</p><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>X-Frame-Options 选项目前仍然被广泛支持，但是稍后即将讨论的CSP的<code>frame-src</code>选项可以替代这个功能。但是IE对CSP的支持从IE11 开始，而IE8以上已经支持X-Frame-Options，所以它仍然需要配置。</p><h3 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h3><p>X-XSS-Protection 被设计用于阻止跨站简本攻击(XSS)，<code>X-XSS-Protection</code>选项将开启浏览器的XSS过滤功能。XSS的攻击者通过注入恶意脚本（例如通过未经安全过滤的用户输入框）到网页，在用户浏览时影响网页正常展示或者偷取浏览者个人数据。<br>最近有一起XSS攻击事件，攻击者通过脆弱的广告网络注入恶意脚本。攻击者有可能会把用户的付款信息转向他自己而不是用户所使用网页的提供者。<br><code>X-XSS-Protection</code>可以通知浏览器过滤并阻止XSS攻击进而降低安全风险，它有四种取值：</p><h4 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h4><p><strong>不启用</strong>（不推荐）</p><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p><strong>启用</strong>，如果检测到攻击代码，将会删除恶意代码并继续展示网页。通常是默认值。</p><h4 id="1-mode-block"><a href="#1-mode-block" class="headerlink" title="1; mode=block"></a>1; mode=block</h4><p><strong>启用</strong>，如果检测到攻击代码，将会阻止网页继续展示。</p><h4 id="1-report-lt-reporting-uri-gt"><a href="#1-report-lt-reporting-uri-gt" class="headerlink" title="1; report=&lt;reporting-uri&gt;"></a>1; report=&lt;reporting-uri&gt;</h4><p><strong>启用</strong>，如果检测到攻击代码，将会阻止并清理网页，然后向指定的uri报告恶意攻击事件。</p><h4 id="推荐配置-1"><a href="#推荐配置-1" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>X-XSS-Protection应该设置为1，然后看情况开启block或report选项</p><h4 id="其他说明-1"><a href="#其他说明-1" class="headerlink" title="其他说明"></a>其他说明</h4><p>与<code>X-Frame-Options</code>类似，CSP可以设置更强大和安全的策略，可以彻底禁止页面内联脚本的执行。稍后讨论。</p><h3 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h3><p>X-Content-Type-Options只有一个取值<code>nosniff</code>，也只有一个目的：阻止浏览器使用<code>Content-Type</code>以外的类型处理当前内容。<br>当浏览器收到一个文件之后，Content-Type会告诉浏览器这个文件的类型，浏览器自己也会使用多种技术做内容嗅探（或者媒体类型嗅探或MIME嗅探），搞清楚文件的具体类型然后相应处理。<br>然后，在此过程中可能出现用户期望的文件类型与事实不符的情况，这有可能导致跨站脚本攻击或恶意软件分发。</p><h4 id="推荐配置-2"><a href="#推荐配置-2" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>上面已经说了，应当总是设置X-Content-Type-Options为<code>nosniff</code>，阻止浏览器默认行为。</p><h3 id="Strict-Transport-Security"><a href="#Strict-Transport-Security" class="headerlink" title="Strict-Transport-Security"></a>Strict-Transport-Security</h3><p>HTTP Strict Transport Security，通常简称为HSTS，用来通知浏览器使用安全的HTTPS连接而不是未加密的 HTTP 协议。<br>有两种取值：</p><h4 id="max-age-lt-MaxAgeInSeconds-gt"><a href="#max-age-lt-MaxAgeInSeconds-gt" class="headerlink" title="max-age=&lt;MaxAgeInSeconds&gt;"></a>max-age=&lt;MaxAgeInSeconds&gt;</h4><p>表示在未来的一段时间（单位为秒）内浏览器需要记住当前站点只能通过 HTTPS 访问。</p><h4 id="includeSubDomains"><a href="#includeSubDomains" class="headerlink" title="includeSubDomains"></a>includeSubDomains</h4><p>可选值，如果指定，表示当前站点的所有子域名也需要使用 HTTPS 连接访问</p><h4 id="preload（译者加）"><a href="#preload（译者加）" class="headerlink" title="preload（译者加）"></a>preload（译者加）</h4><p>可选值。<br>谷歌维护着一个 <a href="https://hstspreload.appspot.com/" target="_blank" rel="noopener">HSTS 预加载服务</a>。按照如下指示成功提交你的域名后，浏览器将会永不使用非安全的方式连接到你的域名。虽然该服务是由谷歌提供的，但所有浏览器都有使用这份列表的意向（或者已经在用了）。<strong>但是，这不是 HSTS 标准的一部分，也不该被当作正式的内容。</strong></p><h4 id="推荐配置-3"><a href="#推荐配置-3" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>Strict-Transport-Security 应当设置为稍微大一些的值例如1年（31536000 秒）。<code>includeSubDomains</code>选项可以看情况设置。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Strict</span>-Transport-Security: <span class="built_in">max</span>-age=<span class="number">31536000</span>; includeSubDomains</span><br></pre></td></tr></table></figure></p><h3 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h3><p>最重要也最复杂的Header可能就是CSP，很多浏览器已经支持。如果配置得当，单一的CSP就可以为你的网站保驾护航。但是如果配置错误，也可能影响巨大。<br>CSP的功能主要就是指示浏览器可以从哪里下载脚背以及服务器资源。<br>一个CSP Header包含两部分：一个指令以及一个资源列表。指令指示当前设置的资源类型，资源列表限制当前指令可以下载的源。<br>注意，CSP可以包含多个策略，你可以在一个Header里面通过分号(;)分隔多条指令，也可以设置多个CSP Header。<br>比如，我想要配置JS文件从我们自己的服务器和一个JS 存储仓库(js.example.com)下载，样好似文件仅从我们自己的服务器下载，我可以通过单一Header 设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-Security-Policy: script-src 'self' js.example.com; style-src 'self';"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p><p>或者通过多个Header 设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-Security-Policy: script-src 'self' js.example.com;"</span>, <span class="keyword">false</span>);</span><br><span class="line">header(<span class="string">"Content-Security-Policy: style-src 'self';"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意最后一个参数表示替换已存在同名Header需要改为<code>false</code>，用来同时设置多个同名Header。</p></blockquote><h4 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h4><h4 id="default-src"><a href="#default-src" class="headerlink" title="default-src"></a>default-src</h4><p>default-src 代表默认指令，如果正在请求的资源类型未明确定义，将会使用 default-src 策略。如果网页有图片请求，但是<code>img-src</code>没有配置，那么就会使用<code>default-src</code>的配置。</p><h4 id="child-src-已弃用"><a href="#child-src-已弃用" class="headerlink" title="child-src(已弃用)"></a>child-src(已弃用)</h4><p>之前用来配置 web workers 以及嵌套浏览器执行环境比如 iframe。然而，frames 和 workers 可能需要单独配置不同策略，这个选项已经被<code>frame-src</code>和<code>worker-src</code>取代。</p><h4 id="connect-src"><a href="#connect-src" class="headerlink" title="connect-src"></a>connect-src</h4><p>限制脚本可以请求的源（a标签，pings，fetch，XMLHttpRequest，WebSocket，EventSource）</p><h4 id="font-src"><a href="#font-src" class="headerlink" title="font-src"></a>font-src</h4><p>限制字体可以请求的源（Google Fonts等）</p><h4 id="frame-src"><a href="#frame-src" class="headerlink" title="frame-src"></a>frame-src</h4><p>限制<code>&lt;frame&gt;</code> 和 <code>&lt;iframe&gt;</code>可以加载的源</p><h4 id="frame-ancestors"><a href="#frame-ancestors" class="headerlink" title="frame-ancestors"></a>frame-ancestors</h4><p>限制当前页面可以被<code>&lt;frame&gt;</code> 和 <code>&lt;iframe&gt;</code>加载的源，设置为<code>&#39;none&#39;</code>效果与 <code>X-Frame-Options: DENY</code> 相同</p><h4 id="img-src"><a href="#img-src" class="headerlink" title="img-src"></a>img-src</h4><p>限制图片可以加载的源</p><h4 id="manifest-src"><a href="#manifest-src" class="headerlink" title="manifest-src"></a>manifest-src</h4><p>限制 Application manifest 文件可以加载的源</p><h4 id="media-src"><a href="#media-src" class="headerlink" title="media-src"></a>media-src</h4><p>限制媒体（&lt;audio&gt; , &lt;video&gt;, &lt;track&gt;）可以加载的源</p><h4 id="object-src"><a href="#object-src" class="headerlink" title="object-src"></a>object-src</h4><p>限制 &lt;object&gt;, &lt;embed&gt;, and &lt;applet&gt; 可以加载的源</p><h4 id="prefech-src"><a href="#prefech-src" class="headerlink" title="prefech-src"></a>prefech-src</h4><p>限制预请求或预渲染的源</p><h4 id="script-src"><a href="#script-src" class="headerlink" title="script-src"></a>script-src</h4><p>限制JS脚本的源。应当按需求配置为<code>&#39;self&#39;</code>以及可信的第三方CDN源。<strong>永远不要允许</strong><code>&#39;unsafe-inline&#39;</code>，否则内联脚本的执行可能会导致XSS攻击，从而破坏整个CSP配置的功能。</p><h4 id="style-src"><a href="#style-src" class="headerlink" title="style-src"></a>style-src</h4><p>限制CSS样式的源</p><h4 id="webrtc-src"><a href="#webrtc-src" class="headerlink" title="webrtc-src"></a>webrtc-src</h4><p>限制WebRTC(Web Real-Time Communications)可以连接的源</p><h4 id="worker-src"><a href="#worker-src" class="headerlink" title="worker-src"></a>worker-src</h4><p>限制Worker/SharedWorker/ServiceWorker脚本的源</p><h4 id="form-action"><a href="#form-action" class="headerlink" title="form-action"></a>form-action</h4><p>限制表单提交的源</p><h4 id="report-uri"><a href="#report-uri" class="headerlink" title="report-uri"></a>report-uri</h4><p>指定破坏CSP规则上报的uri</p><h4 id="block-all-mixed-content"><a href="#block-all-mixed-content" class="headerlink" title="block-all-mixed-content"></a>block-all-mixed-content</h4><p>如果页面是通过HTTPS加载的，跳过所有HTTP资源请求</p><h4 id=""><a href="#" class="headerlink" title="*"></a>*</h4><p>允许所有data stream(blob:, data:, filesystem:)以外的源</p><h4 id="‘none’"><a href="#‘none’" class="headerlink" title="‘none’"></a>‘none’</h4><p>禁止当前资源类型从任意源加载</p><h4 id="‘self’"><a href="#‘self’" class="headerlink" title="‘self’"></a>‘self’</h4><p>当前页面所在源（同协议，同主机名，同端口）</p><h4 id="Data"><a href="#Data" class="headerlink" title="Data:"></a>Data:</h4><p>数据流（例如base64 编码的图片地址）</p><h4 id="domain-example-com"><a href="#domain-example-com" class="headerlink" title="domain.example.com"></a>domain.example.com</h4><p>某一个指定域名</p><h4 id="example-com"><a href="#example-com" class="headerlink" title="*.example.com"></a>*.example.com</h4><p>某一个指定域名以及所有子域名</p><h4 id="https-domain-example-com"><a href="#https-domain-example-com" class="headerlink" title="https://domain.example.com"></a><em><a href="https://domain.example.com" target="_blank" rel="noopener">https://domain.example.com</a></em></h4><p>某一个指定域名并且只能通过HTTPS 连接</p><h4 id="https"><a href="#https" class="headerlink" title="https:"></a>https:</h4><p>任意通过HTTPS连接的域名</p><h4 id="‘unsafe-inline’"><a href="#‘unsafe-inline’" class="headerlink" title="‘unsafe-inline’"></a>‘unsafe-inline’</h4><p>允许内联代码，包括内联样式或脚本块（请尽量避免使用）</p><h4 id="‘unsafe-eval’"><a href="#‘unsafe-eval’" class="headerlink" title="‘unsafe-eval’"></a>‘unsafe-eval’</h4><p>允许javascript<code>eval()</code>方法</p><h4 id="‘nonce-lt-noncevalue-gt-’"><a href="#‘nonce-lt-noncevalue-gt-’" class="headerlink" title="‘nonce-&lt;noncevalue&gt;’"></a>‘nonce-&lt;noncevalue&gt;’</h4><p>可以在script/style标签上增加一个随机数，只有随机数与noncevalue匹配时，相应标签代码才可以执行。注意这个策略已经破解，可能不安全。</p><h4 id="‘sha256-lt-hashvalue-gt-’"><a href="#‘sha256-lt-hashvalue-gt-’" class="headerlink" title="‘sha256-&lt;hashvalue&gt;’"></a>‘sha256-&lt;hashvalue&gt;’</h4><p>script/style的SHA256哈希值与hashvalue匹配，相应代码才可以执行</p><h4 id="推荐配置-4"><a href="#推荐配置-4" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>这一项很难有一个通用的确切值，因为需要根据每个网站具体配置。我的做法（在任何安全相关的问题）是尽可能把规则配的具体，然后找到冲突的点，解决冲突或者放松规则，直到所有的配置都正常工作。这里也可以这么做，但是请考虑以下情况：<br>比如<code>style-src</code>，我们很容易就会配置为<code>&#39;self&#39;</code>策略，表示只能从本域加载 (.css) 文件。但你的代码里面可能会有少量内联样式，这时候怎么处理呢？最好是把这些内联样式都移到某一个文件里面，这并不总是可以很简单的完成，你可能会需要允许<code>&#39;unsafe-inline&#39;</code>。<br>我觉得一个比较好的方式是通过一项项查看我的某个项目的CSP配置，说明一下我为什么这么配置，以及这么配置的负面影响。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>-src <span class="string">'none'</span>;</span><br></pre></td></tr></table></figure></p><p>默认配置为拒绝所有未指定资源类型的任意加载源。考虑到我已经仔细检查了其他所有资源类型的加载策略，不应该有资源会回退到这个配置，如果有，那么这个资源一定不是由我添加的。注意：其他人在新增资源但是无法加载时可能来找你麻烦，因此很多人会设置为<code>&#39;self&#39;</code>。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-src <span class="string">'self'</span> <span class="string">https:</span><span class="comment">//js.stripe.com;</span></span><br></pre></td></tr></table></figure></p><p>所有的脚本都已经打包、压缩，因此不应该出现内联脚本，应当配置为<code>&#39;self&#39;</code>。另外，我使用 Stripe 作为支付网关，所以要允许 Stripe 的脚本库。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>-src <span class="string">'self'</span> https:<span class="comment">//api.stripe.com;</span></span><br></pre></td></tr></table></figure></p><p>我的应用大量使用Ajax请求，所以需要添加<code>&#39;self&#39;</code>。Stripe 也需要使用脚本请求接口，所以也添加了 Stripe 的服务域名。<br><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">img-src</span> <span class="string">'self'</span> data:;</span><br></pre></td></tr></table></figure></p><p>80年代的网页有一个明显的问题就是所有的图片都是由自己的服务器托管，所以需要<code>&#39;self&#39;</code>。当然，网页里面也会用到内联SVG图像，所以包含了<code>&#39;data:&#39;</code>。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style-src <span class="string">'self'</span> <span class="string">'unsafe-inline'</span> <span class="string">https:</span><span class="comment">//fonts.googleapis.com;</span></span><br></pre></td></tr></table></figure></p><p>样式主要都是自己服务器托管，少量使用 Google Fonts，所以添加了<code>&#39;self&#39;</code>和Google Fonts。很惭愧我（虽然很少但是偶尔会）也使用了页面内联样式，所以我添加了<code>&#39;unsafe-inline&#39;</code>。注意：已经有证据证明可以通过CSS注入读取表单信息，所以你需要额外注意使用这个策略可能导致的应用程序脆弱性。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-src <span class="string">'self'</span> <span class="string">https:</span><span class="comment">//fonts.gstatic.com;</span></span><br></pre></td></tr></table></figure></p><p>这个也相当简单，我要用到我们自己的和 Google 提供的字体，所以添加了<code>&#39;self&#39;</code>和Google的字体库。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frame-src <span class="string">'self'</span> https:<span class="regexp">//</span>*.stripe.com https:<span class="regexp">//</span>stripe.com;</span><br></pre></td></tr></table></figure></p><p>这个略微有些复杂，Stripe 允许使用 <em>3D Secure</em> 保护卡的授权登录。不幸的是，对方推荐的实现方式是使用 Iframe（我也讨厌）。所以我这里添加 Stripe 作为支付网关，<code>&#39;self&#39;</code>做为授权完成之后 Iframe 的回跳地址。<br>如果你也使用Stripe，你可能知道他们的文档说明只需要添加 <strong><a href="https://js.stripe.com" target="_blank" rel="noopener">https://js.stripe.com</a></strong> 作为 frame source，但是我操作的过程中发现一些问题，我正在与他们的技术支持团队合作把这个策略尽量收紧。<br><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">frame-ancestors</span> <span class="string">'none'</span>;</span><br></pre></td></tr></table></figure></p><p>之前已经提到，这项配置可以禁止当前网页被任何网站通过 Iframe 嵌入加载。注意：我在 <em>3D Secure</em> 的授权回跳页面上面把这项配置放送到<code>&#39;self&#39;</code>，这样我自己的网站才可以通过Iframe加载回跳页面。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">report</span>-uri /csp-<span class="keyword">report</span>.php;</span><br></pre></td></tr></table></figure></p><p>所有破坏CSP规则的异常都会被上报（由客户端浏览器）到这个地址，记录下来以后分析使用。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">block</span>-all-mixed-<span class="built_in">content</span>;</span><br></pre></td></tr></table></figure></p><p>最后，尽管我没有任何混合内容（译者：与页面协议不一致的加载方式，例如页面使用HTTPS，而某一图片使用HTTP），防止意外我还是添加了这条禁止策略。</p><p>其他指令的注意点：　　　<br>绝大部分其他指令策略都会回退到 default-src 然后被禁止。有一个例外：worker-src 在很多浏览器（Chrome 59以上会忽略child-src直接回退到default-src, Edge 17 会忽略 script-src）中会回退到 child-src -&gt; script-src 。<br>不设置 <strong>plugin-types</strong> 指令，在技术上会默认允许所有的扩展类型 (&lt;embed&gt;, &lt;object&gt;, &lt;applet&gt;)，但同时我们没有配置 <strong>object-src</strong>，这项策略会降级到 <strong>default-src</strong> 从而在加载层面禁止所有的扩展。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="Apache-Web-Server-1"><a href="#Apache-Web-Server-1" class="headerlink" title="Apache Web Server"></a>Apache Web Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Header <span class="built_in">set</span> X-Frame-Options <span class="string">"SAMEORIGIN"</span></span><br><span class="line">Header <span class="built_in">set</span> X-XSS-Protection <span class="string">"1; mode=block"</span></span><br><span class="line">Header <span class="built_in">set</span> X-Content-Type-Options <span class="string">"nosniff"</span></span><br><span class="line">Header <span class="built_in">set</span> Strict-Transport-Security <span class="string">"max-age=31536000; includeSubDomains"</span></span><br><span class="line">Header <span class="built_in">set</span> Content-Security-Policy <span class="string">"default-src 'none'; script-src 'self' https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /csp_report.php; block-all-mixed-content;"</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-1"><a href="#Nginx-1" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Frame-Options <span class="string">"SAMEORIGIN"</span></span><br><span class="line">add_header X-XSS-Protection <span class="string">"1; mode=block"</span></span><br><span class="line">add_header X-Content-Type-Options <span class="string">"nosniff"</span></span><br><span class="line">add_header Strict-Transport-Security <span class="string">"max-age=31536000; includeSubDomains"</span></span><br><span class="line">add_header Content-Security-Policy <span class="string">"default-src 'none'; script-src 'self' https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /csp_report.php; block-all-mixed-content;"</span></span><br></pre></td></tr></table></figure><h3 id="IIS-1"><a href="#IIS-1" class="headerlink" title="IIS"></a>IIS</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"X-Frame-Options"</span> <span class="attr">value</span>=<span class="string">"SAMEORIGIN"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"X-XSS-Protection"</span> <span class="attr">value</span>=<span class="string">"1; mode=block"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"X-Content-Type-Options"</span> <span class="attr">value</span>=<span class="string">"nosniff"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"Strict-Transport-Security"</span> <span class="attr">value</span>=<span class="string">"max-age=31536000; includeSubDomains"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">value</span>=<span class="string">"default-src 'none'; script-src 'self' https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /csp_report.php; block-all-mixed-content;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'[HeaderName]: [HeaderValue]'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">header(<span class="string">'X-Frame-Options: SAMEORIGIN'</span>);</span><br><span class="line">header(<span class="string">'X-XSS-Protection: 1; mode=block'</span>);</span><br><span class="line">header(<span class="string">'X-Content-Type-Options: nosniff'</span>);</span><br><span class="line">header(<span class="string">'Strict-Transport-Security: max-age=31536000; includeSubDomains'</span>);</span><br><span class="line">header(<span class="string">'Content-Security-Policy: default-src \'none\'; script-src \'self\' https://js.stripe.com; connect-src \'self\' https://api.stripe.com; img-src \'self\' data:; style-src \'self\' \'unsafe-inline\' https://fonts.googleapis.com; font-src \'self\' https://fonts.gstatic.com; frame-src \'self\' https://*.stripe.com https://stripe.com; frame-ancestors \'none\'; report-uri /csp_report.php; block-all-mixed-content;'</span>);</span><br></pre></td></tr></table></figure><h3 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a><span>ASP.NET</span></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_BeginRequest</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpContext.Current.Response.AddHeader(<span class="string">"X-Frame-Options"</span>, <span class="string">"SAMEORIGIN"</span>);</span><br><span class="line">    HttpContext.Current.Response.AddHeader(<span class="string">"X-XSS-Protection"</span>, <span class="string">"1; mode=block"</span>);</span><br><span class="line">    HttpContext.Current.Response.AddHeader(<span class="string">"X-Content-Type-Options"</span>, <span class="string">"nosniff"</span>);</span><br><span class="line">    HttpContext.Current.Response.AddHeader(<span class="string">"Strict-Transport-Security"</span>, <span class="string">"max-age=31536000; includeSubDomains"</span>);</span><br><span class="line">    HttpContext.Current.Response.AddHeader(<span class="string">"Content-Security-Policy"</span>, </span><br><span class="line">      <span class="string">"default-src 'none'; script-src 'self' https://js.stripe.com; connect-src 'self' https://api.stripe.com; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://*.stripe.com https://stripe.com; frame-ancestors 'none'; report-uri /csp_report.php; block-all-mixed-content;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下集预告"><a href="#下集预告" class="headerlink" title="下集预告"></a>下集预告</h2><p>请先阅读有关使用 HSTS Preloading 的<a href="https://int64software.com/blog/2018/11/10/hardening-website-security-part-1a-hsts-preloading/" target="_blank" rel="noopener">附录</a>，然后继续阅读第二篇：<a href="https://int64software.com/blog/2018/11/13/hardening-website-security-part-2-user-session-cookie-security/" target="_blank" rel="noopener">Cookie攻防实战</a>。<br>关注作者：<a href="https://twitter.com/Int64Software" target="_blank" rel="noopener">Twitter</a><br>译者微薄：<a href="https://weibo.com/zzspace" target="_blank" rel="noopener">新浪微博</a></p><h2 id="刊误"><a href="#刊误" class="headerlink" title="刊误"></a>刊误</h2><p>如果你有任何意见或建议，请联系：<a href="mailto:support@int64software.com" target="_blank" rel="noopener">support@int64software.com</a> 。<br>译者邮箱：<a href="mailto:mrzzcn+blog@gmail.com" target="_blank" rel="noopener">mrzzcn@gmail.com</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://int64software.com/blog/2018/11/05/hardening-website-security-part-1-http-security-headers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hardening Website Security – Part 1: HTTP Security Headers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;感觉每周都会出现新的个人信息被盗事件，原因是某一家公司网站被&lt;strong&gt;黑&lt;/strong&gt;了。   &lt;/p&gt;
&lt;p&gt;大部分攻击都是通过社会工程学诱骗某些用户主动提交一些信息，黑客借助这些信息获取更高权限并最终获取个人资料。   &lt;/p&gt;
&lt;p&gt;如果你想要在21世纪运营一个安全的网站，你需要遵循一些安全准则，我会写一个系列专栏说明这些安全准则，这是第一篇。&lt;br&gt;
    
    </summary>
    
      <category term="Translate" scheme="https://mrzzcn.github.io/categories/Translate/"/>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Translate/Technology/"/>
    
    
      <category term="Web" scheme="https://mrzzcn.github.io/tags/Web/"/>
    
      <category term="HTTP" scheme="https://mrzzcn.github.io/tags/HTTP/"/>
    
      <category term="Headers" scheme="https://mrzzcn.github.io/tags/Headers/"/>
    
      <category term="Security" scheme="https://mrzzcn.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>BFC</title>
    <link href="https://mrzzcn.github.io/2018/12/28/bfc/"/>
    <id>https://mrzzcn.github.io/2018/12/28/bfc/</id>
    <published>2018-12-28T02:19:51.000Z</published>
    <updated>2019-04-27T01:43:35.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-含义"><a href="#1-含义" class="headerlink" title="1. 含义"></a>1. 含义</h2><blockquote><p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。   </p></blockquote><p>下列方式会创建块格式化上下文：</p><ul><li>根元素或包含根元素的元素</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素（元素的 display 为 inline-block）</li><li>表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）</li><li>表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）</li><li>overflow 值不为 visible 的块元素</li><li>display 值为 flow-root 的元素</li><li>contain 值为 layout、content或 strict 的元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li><li>网格元素（display为 grid 或 inline-grid 元素的直接子元素）</li><li>多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）<br>column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。<a id="more"></a></li></ul><p>块格式化上下文包含创建它的元素内部的所有内容.</p><p>块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。<br>– MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">戳此查看</a></p><h2 id="2-应用"><a href="#2-应用" class="headerlink" title="2. 应用"></a>2. 应用</h2><h3 id="同一个-BFC-下外边距会发生折叠"><a href="#同一个-BFC-下外边距会发生折叠" class="headerlink" title="同一个 BFC 下外边距会发生折叠"></a>同一个 BFC 下外边距会发生折叠</h3><iframe height="265" scrolling="no" title="aPyrXL" src="//codepen.io/zhangzhen/embed/aPyrXL/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/zhangzhen/pen/aPyrXL/" target="_blank" rel="noopener">aPyrXL</a> by Jack (<a href="https://codepen.io/zhangzhen" target="_blank" rel="noopener">@zhangzhen</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>   <p>前两个元素（1-1 1-2）位于同一个BFC内部，所以上边元素的 <code>margin-bottom</code> 与 下边元素的 <code>margin-top</code> 发生坍缩，坍缩的结果为最终的 <code>margin</code> 值是两者中的较大值.<br>后两个元素（2-1 3-1）位于不同BFC内部，所以没有发生坍缩，最终 <code>margin</code> 等于上边元素的 <code>margin-bottom</code> 加下边元素的 <code>margin-top</code></p><h3 id="包含浮动的元素（清除浮动）"><a href="#包含浮动的元素（清除浮动）" class="headerlink" title="包含浮动的元素（清除浮动）"></a>包含浮动的元素（清除浮动）</h3><iframe height="265" scrolling="no" title=" BFC 可以包含浮动的元素（清除浮动）" src="//codepen.io/zhangzhen/embed/ebEwNR/?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/zhangzhen/pen/ebEwNR/" target="_blank" rel="noopener"> BFC 可以包含浮动的元素（清除浮动）</a> by Jack (<a href="https://codepen.io/zhangzhen" target="_blank" rel="noopener">@zhangzhen</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>上方容器Parent 1内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素（Parent 2）。</p><h3 id="阻止元素被浮动元素覆盖"><a href="#阻止元素被浮动元素覆盖" class="headerlink" title="阻止元素被浮动元素覆盖"></a>阻止元素被浮动元素覆盖</h3><iframe height="406" scrolling="no" title="BFC 可以阻止元素被浮动元素覆盖" src="//codepen.io/zhangzhen/embed/YdrKzx/?height=406&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/zhangzhen/pen/YdrKzx/" target="_blank" rel="noopener">BFC 可以阻止元素被浮动元素覆盖</a> by Jack (<a href="https://codepen.io/zhangzhen" target="_blank" rel="noopener">@zhangzhen</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>上边的布局是一个常见的图文混排的模版，但是有时候我们不需要这种布局，我们期望一个左右布局的页面，如下边的Demo展示的这种，就可以通过触发下面元素的 <strong>BFC</strong> 来实现。</p><p>这个方法来实现两列自适应布局，左边宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p><p>当然也可以用来实现多列布局，也是相当方便。</p><h2 id="3-FC"><a href="#3-FC" class="headerlink" title="3. (*)FC"></a>3. (*)FC</h2><p>FC 即 <code>Formatting Contexts</code>，包含：IFC、BFC、GFC 与 FFC 。FC是网页CSS视觉渲染的一部分，用于决定盒子模型的布局、其子元素将如何定位以及和其他元素的关系和相互作用。<br>其中：IFC（Inline Formatting Contexts）与 BFC（Block Formatting Contexts）是 CSS2.1 规范中引进的；后面两个是 CSS3 新增规范，GFC（GridLayout Formatting Contexts）以及 FFC（Flex Formatting Context）。</p><p>关于这几个 FC 的具体区别可参考：<a href="https://github.com/chokcoco/iCSS/issues/5" target="_blank" rel="noopener">https://github.com/chokcoco/iCSS/issues/5</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/25321647" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25321647</a><br><a href="https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/</a><br><a href="https://github.com/chokcoco/iCSS/issues/5" target="_blank" rel="noopener">https://github.com/chokcoco/iCSS/issues/5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-含义&quot;&gt;&lt;a href=&quot;#1-含义&quot; class=&quot;headerlink&quot; title=&quot;1. 含义&quot;&gt;&lt;/a&gt;1. 含义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下列方式会创建块格式化上下文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素或包含根元素的元素&lt;/li&gt;
&lt;li&gt;浮动元素（元素的 float 不是 none）&lt;/li&gt;
&lt;li&gt;绝对定位元素（元素的 position 为 absolute 或 fixed）&lt;/li&gt;
&lt;li&gt;行内块元素（元素的 display 为 inline-block）&lt;/li&gt;
&lt;li&gt;表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）&lt;/li&gt;
&lt;li&gt;表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）&lt;/li&gt;
&lt;li&gt;匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）&lt;/li&gt;
&lt;li&gt;overflow 值不为 visible 的块元素&lt;/li&gt;
&lt;li&gt;display 值为 flow-root 的元素&lt;/li&gt;
&lt;li&gt;contain 值为 layout、content或 strict 的元素&lt;/li&gt;
&lt;li&gt;弹性元素（display为 flex 或 inline-flex元素的直接子元素）&lt;/li&gt;
&lt;li&gt;网格元素（display为 grid 或 inline-grid 元素的直接子元素）&lt;/li&gt;
&lt;li&gt;多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）&lt;br&gt;column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。
    
    </summary>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Technology/"/>
    
      <category term="CSS" scheme="https://mrzzcn.github.io/categories/Technology/CSS/"/>
    
    
      <category term="随笔" scheme="https://mrzzcn.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="CSS" scheme="https://mrzzcn.github.io/tags/CSS/"/>
    
      <category term="BFC" scheme="https://mrzzcn.github.io/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>[翻译]Arrow Functions in Class Properties Might Not Be As Great As We Think</title>
    <link href="https://mrzzcn.github.io/2018/11/17/arrow-function-in-class-property/"/>
    <id>https://mrzzcn.github.io/2018/11/17/arrow-function-in-class-property/</id>
    <published>2018-11-17T06:34:52.000Z</published>
    <updated>2019-04-27T01:43:35.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Javascript 新增了 <code>arrow function</code> 和 <code>class</code>，这两者的概念可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">arrow function</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">类</a>。<br>React 里面的方法想要在JSX中使用，必须手动绑定 <code>this</code>，有些人会在这儿使用箭头函数简写掉 <code>this.method = this.method.bind(this);</code> 这行代码，本文作者对这种写法进行了分析，原文在此：<a href="https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1" target="_blank" rel="noopener">Arrow Functions in Class Properties Might Not Be As Great As We Think</a><br><a id="more"></a></p></blockquote><p>自2016年以来，<a href="https://github.com/tc39/proposal-class-fields" target="_blank" rel="noopener"> Class Properties Proposal</a> 让我们的代码简洁了许多，特别是在 <code>React</code> 的 <code>state</code> 书写或者在声明静态成员 <code>propTypes</code> 和 <code>defaultProps</code> 的时候。<br>看下代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class properties 以前</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isLoading: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Greeting.protoTypes = &#123;</span><br><span class="line">  name: ProtoTypes.String.Required</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: <span class="string">'Stranger'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class properties 之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> protoTypes = &#123;</span><br><span class="line">    name: ProtoTypes.String.Required</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">'Stranger'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    isLoading: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，在 React 里面需要处理<code>this</code>绑定的时候，直接以属性声明而不再使用 <code>constructor</code> 赋值方式在过去的几个月里面也越来越成为一种趋势。<br><a href="https://dwz.cn/EffCghws" target="_blank" rel="noopener">Twitter链接</a><br><img src="http://img.zhugeliang.me/react-bind.png.engineerlife" alt="在React 中怎么绑定this到方法"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Usage example of arrow function in a class property.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentA</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数在声明属性时候很方便，自动绑定 <code>this</code>，不需要在 <code>constructor</code> 里添加 <code>this.handleClick = this.handleClick.bind(this)</code>.<br>但是，我们真的可以这么用吗？<br>首先来看一下类属性究竟是怎么实现自动绑定的：   </p><h2 id="箭头函数是怎么编译到ES2017的"><a href="#箭头函数是怎么编译到ES2017的" class="headerlink" title="箭头函数是怎么编译到ES2017的"></a>箭头函数是怎么编译到ES2017的</h2><p>编写一个包含静态属性，实例属性，箭头函数属性，另外一个常见成员方法的类，使用 <code>transform-class-properties</code> 插件编译.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> color = <span class="string">"red"</span>;</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleLongClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 <a href="https://babeljs.io/repl/" target="_blank" rel="noopener">Babel REPL</a> 编译这个类到ES2017 格式，编译插件：<code>es2017</code> <code>stage-2</code>，我们得到以下代码：</p><blockquote><p>打开 Babel 里面查看代码时如果编译出错，请在左下角添加 Plugin ： babel-plugin-transform-class-properties</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleLongClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.color = <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>有兴趣的同学可以看一下：<a href="https://dwz.cn/YRcMqUwG" target="_blank" rel="noopener">点击查看</a></p></blockquote><p>我们可以看到， 实例属性被移动到 <code>constructor</code> 内部，静态成员被移动到类声明完成之后<br><code>static</code>  关键字可以省略额外的静态属性声明代码，然后可以直接<code>export class XXX extends Component</code>，个人比较喜欢这点<br>实例属性表现也不错，在没有编译的版本中，类声明简洁了许多<br>但是，箭头函数声明的属性 <code>handleClick</code> 也被移动到了 <code>constructor</code>，与普通的实例属性类似<br>正常的成员方法 <code>handleLongClick</code> 没有改变<br>属性自动初始化对于正常的属性没有问题，但是使用箭头函数声明的属性，属于Hack得到一个 <code>this</code> 绑定<br>你有没有发现问题？我们来看下我的发现</p><h2 id="Mockability"><a href="#Mockability" class="headerlink" title="Mockability"></a>Mockability</h2><p>如果我们想要 mock 一个类的某一个方法， 最简单的方式就是修改 <code>prototype</code>，这会对这个类原型链上所有的对象生效<br>我们看下使用这种方式测试之前的类 <code>A</code> 会发生什么：<br>我们继续把之前的类 <code>A</code> 编译到 ES2015: <a href="https://dwz.cn/hBMapixL" target="_blank" rel="noopener">点击查看</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> color = <span class="string">"red"</span>;</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleLongClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译输出</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, A);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.counter++;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  A.prototype.handleLongClick = <span class="function"><span class="keyword">function</span> <span class="title">handleLongClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> A;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">A.color = <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure></p><p><code>A.prototype.handleLongClick</code> 有效.<br><code>A.prototype.handleClick</code> 未定义.</p><p>叮~， 使用箭头函数定义的 <code>handleClick</code> 编译之后被移动到构造函数里面使用实例声明，而不是类方法。所以，我们在实例上 Mock 这种方式定义的方法，这些更改无法同步到其他对象。</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>首先定义 class A .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A.handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleLongClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A.handleLongClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype);</span><br><span class="line"><span class="comment">// &#123;constructor: ƒ, handleLongClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> A().handleClick();</span><br><span class="line"><span class="comment">// A.handleClick</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> A().handleLongClick();</span><br><span class="line"><span class="comment">// A.handleLongClick</span></span><br></pre></td></tr></table></figure></p><p>如果 class B 继承 class A，由于 <code>handleClick</code> 是不在 <code>prototype</code> 上定义的，class B 内部无法通过 <code>super.handleClick</code> 调用父类方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.handleClick();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B.handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleLongClick() &#123;</span><br><span class="line">    <span class="keyword">super</span>.handleLongClick();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B.handleLongClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(B.prototype);</span><br><span class="line"><span class="comment">// A &#123;constructor: ƒ, handleLongClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(B.prototype.__proto__);</span><br><span class="line"><span class="comment">// &#123;constructor: ƒ, handleLongClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> B().handleClick();</span><br><span class="line"><span class="comment">// Uncaught TypeError: (intermediate value).handleClick is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> B().handleLongClick();</span><br><span class="line"><span class="comment">// A.handleLongClick</span></span><br><span class="line"><span class="comment">// B.handleLongClick</span></span><br></pre></td></tr></table></figure></p><p>class C 继承 class A，但是使用类成员而不是箭头函数重新实现了 <code>handleClick</code> 方法，这时 <code>handleClick</code> 将只会执行 <code>super.handleClick</code>, 而不会执行自己定义的代码（只执行父类定义的方法），奇怪了？</p><p>这时因为父类的构造函数重写了<code>handleClick</code>方法。</p><p><code>C.prototype.handleClick()</code>会调用class C的 <code>handleClick</code>方法，但是会报错: Uncaught TypeError: (intermediate value).handleClick is not a function .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">super</span>.handleClick();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"C.handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(C.prototype);</span><br><span class="line"><span class="comment">// A &#123;constructor: ƒ, handleClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(C.prototype.__proto__);</span><br><span class="line"><span class="comment">// &#123;constructor: ƒ, handleLongClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> C().handleClick();</span><br><span class="line"><span class="comment">// A.handleClick</span></span><br></pre></td></tr></table></figure></p><p>感兴趣的同学可以<a href="https://dwz.cn/d339GQNj" target="_blank" rel="noopener">点击链接</a>查看原因。</p><p>class D 以字面量对象方式继承 class A，D 将拥有一个空的 prototype，<code>new D().handleClick()</code> 会打印 <code>A.handleClick</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(D.prototype);</span><br><span class="line"><span class="comment">// A &#123;constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(D.prototype.__proto__);</span><br><span class="line"><span class="comment">// &#123;constructor: ƒ, handleLongClick: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> D().handleClick();</span><br><span class="line"><span class="comment">// A.handleClick</span></span><br></pre></td></tr></table></figure></p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>现在我们来看一下比较有趣的部分：性能   </p><p>我们知道方法通常都是定义在原型上面，这样定义的方法会在所有实例上共享. 一个组件列表里面的所有组件都分享相同的方法. 列表里面的每个组件被点击, 都会执行点击事件, 但是无论哪个组件点击都是调用原型链上同一个方法. 因为是同一个方法多次调用, JS引擎会优化这个方法.</p><p>与此相对, 类中箭头函数定义的方法, 在多个组件实例中会创建多个方法. 还记得刚才我们看到的编译输出吗, 箭头函数成员在构造方法中声明. 每个组件被点击, 执行的都是不同的方法.</p><p>我们看下在V8 Engine(Chrome)下二者的表现差异:</p><p>第一个测试比较简单, 只测试初始化时间, 然后调用方法一次.</p><p>注意这个测试中数字并不重要, 因为单个实例化过程在应用程序中无关大碍, 我们讨论的是每秒能执行多少次操作并且频率足够高. 我比较担心方法之间的差异.<br><img src="http://img.zhugeliang.me/arrow-functions-test-1.png.engineerlife" alt="Ops/s of initialization and call"></p><p> For the second one, I used a representative use case. The instantiation of 100 components — like a list — which after we called the method one time on each.</p><p>第二个测试, 使用一个比较有代表性的使用示例. 初始化100个组件形成一个组件列表, 对每个组件调用一次方法.<br><img src="http://img.zhugeliang.me/arrow-functions-test-2.png.engineerlife" alt="Ops/s of instantiation of 100 components and method call"></p><blockquote><p>All benchmarks were run on a MacBook Pro 13” 2016 2GHz on Mac OS X 10.13.1 and Chrome 62.0.3202.</p></blockquote><p>总的来说, 为了更好的代码执行性能, 我们需要在原型上声明方法然后在需要时<code>bind</code>到实例上(当作属性或者回调函数传递). 在原型上声明方法并在构造方法中声明并绑定自己的属性是有意义的, 而且方法并不是特别多.<br>我们讨论的是高频操作, 但是我们清楚看到箭头函数在类声明中性能表现并不是我们期待的情况.<br>有人会说这点儿性能损失并无大碍, 我们绝大多数情况并不会对一个组件声明很多实例, 的确这样.<br>你也可以认为这是一个提前优化(提前优化是万恶之源), 但是, 我们能把箭头函数在类属性中的使用当作简化使用还是不当使用呢? 希望JS引擎将来会优化类属性中的箭头函数.</p><blockquote><p>P.S: Class properties for properties are such a great improvement!</p></blockquote><p>我在很多应用程序和软件包中都见到过这类使用方式, 很多可以多实例方式使用的组件也是. 既然已经知道这种方式现在会影响程序性能, 我们真的应该继续使用吗?</p><p>我个人认为这是一个牺牲性能, 而且并不总是那么好用的做法.</p><p>解决方案是 <a href="https://github.com/andreypopp/autobind-decorator" target="_blank" rel="noopener">autobind-decorator</a>, 不幸的是当前只能借助babel 使用, 它还只是一个<code>stage 2</code>的提案.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @autobind</span><br><span class="line">  method() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管如此, 他们也建议最好不要滥用 autobind:</p><blockquote><p>It is unnecessary to do that to every function. This is just as bad as autobinding (on a class). You only need to bind functions that you pass around. e.g. <code>onClick={this.doSomething}</code>. Or <code>fetch.then(this.hanldeDone)</code> — Dan Abramov.        ‏<br>I was the guy who came up with autobinding in older Reacts and I’m glad to see it gone. It might save you a few keystrokes but it allocates functions that’ll never be called in 90% of cases and has noticeable performance degradation. Getting rid of autobinding is a good thing — Peter Hunt</p></blockquote><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>使用箭头函数声明的类成员会被编译到构造函数中定义到<strong>当前对象</strong>上面而不是在当前类的原型上.</p><p>我们无法使用<code>super</code>调用这些方法.</p><p>箭头函数声明类属性比绑定方法慢很多, 它们都比正常方法要慢.</p><p>我们只需要<code>.bind()</code>可能会被传递的方法.</p><hr><p>知道箭头函数声明的类属性是如何工作以及真实的性能表现之后, 你应该可以做出聪明的选择并清楚这些选择的结果.<br>你觉得呢? 你会继续这么使用吗? 这篇文章会不会让你改变想法?<br>欢迎交流想法.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Javascript 新增了 &lt;code&gt;arrow function&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt;，这两者的概念可参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arrow function&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;类&lt;/a&gt;。&lt;br&gt;React 里面的方法想要在JSX中使用，必须手动绑定 &lt;code&gt;this&lt;/code&gt;，有些人会在这儿使用箭头函数简写掉 &lt;code&gt;this.method = this.method.bind(this);&lt;/code&gt; 这行代码，本文作者对这种写法进行了分析，原文在此：&lt;a href=&quot;https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arrow Functions in Class Properties Might Not Be As Great As We Think&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Translate" scheme="https://mrzzcn.github.io/categories/Translate/"/>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Translate/Technology/"/>
    
    
      <category term="随笔" scheme="https://mrzzcn.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="React" scheme="https://mrzzcn.github.io/tags/React/"/>
    
      <category term="Javascript" scheme="https://mrzzcn.github.io/tags/Javascript/"/>
    
      <category term="ES6" scheme="https://mrzzcn.github.io/tags/ES6/"/>
    
      <category term="Class" scheme="https://mrzzcn.github.io/tags/Class/"/>
    
      <category term="Arrow functions" scheme="https://mrzzcn.github.io/tags/Arrow-functions/"/>
    
  </entry>
  
  <entry>
    <title>core-js ES6 ES7 cheatsheet</title>
    <link href="https://mrzzcn.github.io/2018/04/27/core-js-es/"/>
    <id>https://mrzzcn.github.io/2018/04/27/core-js-es/</id>
    <published>2018-04-27T06:06:23.000Z</published>
    <updated>2019-04-27T01:43:35.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ECMAScript 5 (ES5)：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</p></blockquote><blockquote><p>ECMAScript 6 (ES2015/ES6) / ECMAScript 2015 (ES2015)：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">这张兼容性表</a>来查看不同浏览器和工具的实现情况。</p></blockquote><blockquote><p>ECMAScript 2016 (ES2016/ES7)：第七版 ECMAScript 修订.</p></blockquote><blockquote><p>ECMAScript 2017 (ES2017)</p></blockquote><p>对常用的API作个简单说明(按需引入polyfill), <a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener">点此查看Github链接原文</a><br><a id="more"></a><br>下文中<code>.</code> 表示类方法/属性, <code>#</code> 表示实例方法/属性<br>ES5: All features moved to the es6 namespace, here just a list of features:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">  .create(proto | <span class="literal">null</span>, descriptors?)    -&gt; object</span><br><span class="line">  .getPrototypeOf(object)                -&gt; proto | <span class="literal">null</span></span><br><span class="line">  .defineProperty(target, key, desc)     -&gt; target, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .defineProperties(target, descriptors) -&gt; target, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .getOwnPropertyDescriptor(object, key) -&gt; desc</span><br><span class="line">  .getOwnPropertyNames(object)           -&gt; array</span><br><span class="line">  .keys(object)                          -&gt; array</span><br><span class="line">  .seal(object)                          -&gt; object, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .freeze(object)                        -&gt; object, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .preventExtensions(object)             -&gt; object, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .isSealed(object)                      -&gt; bool, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .isFrozen(object)                      -&gt; bool, cap <span class="keyword">for</span> ie8-</span><br><span class="line">  .isExtensible(object)                  -&gt; bool, cap <span class="keyword">for</span> ie8-</span><br><span class="line"><span class="built_in">Array</span></span><br><span class="line">  .isArray(<span class="keyword">var</span>)                                -&gt; bool</span><br><span class="line">  #slice(start?, end?)                         -&gt; array, fix for ie7-</span><br><span class="line">  #join(string = ',')                          -&gt; string, fix for ie7-</span><br><span class="line">  #indexOf(var, from?)                         -&gt; int</span><br><span class="line">  #lastIndexOf(var, from?)                     -&gt; int</span><br><span class="line">  #every(fn(val, index, @), that)              -&gt; bool</span><br><span class="line">  #some(fn(val, index, @), that)               -&gt; bool</span><br><span class="line">  #forEach(fn(val, index, @), that)            -&gt; void</span><br><span class="line">  #map(fn(val, index, @), that)                -&gt; array</span><br><span class="line">  #filter(fn(val, index, @), that)             -&gt; array</span><br><span class="line">  #reduce(fn(memo, val, index, @), memo?)      -&gt; var</span><br><span class="line">  #reduceRight(fn(memo, val, index, @), memo?) -&gt; var</span><br><span class="line">  #sort(fn?)                                   -&gt; @, fixes for some engines</span><br><span class="line"><span class="built_in">Function</span></span><br><span class="line">  #bind(object, ...args) -&gt; boundFn(...args)</span><br><span class="line"><span class="built_in">String</span></span><br><span class="line">  #split(separator, limit) -&gt; array</span><br><span class="line">  #trim()                  -&gt; str</span><br><span class="line"><span class="built_in">RegExp</span></span><br><span class="line">  #toString() -&gt; str</span><br><span class="line"><span class="built_in">Number</span></span><br><span class="line">  #toFixed(digits)        -&gt; string</span><br><span class="line">  #toPrecision(precision) -&gt; string</span><br><span class="line"><span class="built_in">parseInt</span>(str, radix) -&gt; int</span><br><span class="line"><span class="built_in">parseFloat</span>(str)      -&gt; num</span><br><span class="line"><span class="built_in">Date</span></span><br><span class="line">  .now()         -&gt; int</span><br><span class="line">  #toISOString() -&gt; string</span><br><span class="line">  #toJSON()      -&gt; string</span><br></pre></td></tr></table></figure></p><hr><p>ES6: <code>Object</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">  .assign(target, ...src)                -&gt; target</span><br><span class="line">  .is(a, b)                              -&gt; bool</span><br><span class="line">  .setPrototypeOf(target, proto | <span class="literal">null</span>)  -&gt; target (required __proto__ - IE11+)</span><br><span class="line">  .create(object | <span class="literal">null</span>, descriptors?)   -&gt; object</span><br><span class="line">  .getPrototypeOf(<span class="keyword">var</span>)                   -&gt; object | <span class="literal">null</span></span><br><span class="line">  .defineProperty(object, key, desc)     -&gt; target</span><br><span class="line">  .defineProperties(object, descriptors) -&gt; target</span><br><span class="line">  .getOwnPropertyDescriptor(<span class="keyword">var</span>, key)    -&gt; desc | <span class="literal">undefined</span></span><br><span class="line">  .keys(<span class="keyword">var</span>)                             -&gt; array</span><br><span class="line">  .getOwnPropertyNames(<span class="keyword">var</span>)              -&gt; array</span><br><span class="line">  .freeze(<span class="keyword">var</span>)                           -&gt; <span class="keyword">var</span></span><br><span class="line">  .seal(<span class="keyword">var</span>)                             -&gt; <span class="keyword">var</span></span><br><span class="line">  .preventExtensions(<span class="keyword">var</span>)                -&gt; <span class="keyword">var</span></span><br><span class="line">  .isFrozen(<span class="keyword">var</span>)                         -&gt; bool</span><br><span class="line">  .isSealed(<span class="keyword">var</span>)                         -&gt; bool</span><br><span class="line">  .isExtensible(<span class="keyword">var</span>)                     -&gt; bool</span><br><span class="line">  #toString()                            -&gt; string, ES6 fix: @@toStringTag support</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Function</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span></span><br><span class="line">  #bind(object, ...args) -&gt; boundFn(...args)</span><br><span class="line">  #name                  -&gt; string (IE9+)</span><br><span class="line">  #@@hasInstance(var)    -&gt; bool</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Array</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span></span><br><span class="line">  .from(iterable | array-like, mapFn(val, index)?, that) -&gt; array</span><br><span class="line">  .of(...args)                                           -&gt; array</span><br><span class="line">  .isArray(<span class="keyword">var</span>)                                          -&gt; bool</span><br><span class="line">  #copyWithin(target = 0, start = 0, end = @length)      -&gt; @</span><br><span class="line">  #fill(val, start = 0, end = @length)                   -&gt; @</span><br><span class="line">  #find(fn(val, index, @), that)                         -&gt; val</span><br><span class="line">  #findIndex(fn(val, index, @), that)                    -&gt; index | -1</span><br><span class="line">  #values()                                              -&gt; iterator</span><br><span class="line">  #keys()                                                -&gt; iterator</span><br><span class="line">  #entries()                                             -&gt; iterator</span><br><span class="line">  #join(string = ',')                                    -&gt; string, fix for ie7-</span><br><span class="line">  #slice(start?, end?)                                   -&gt; array, fix for ie7-</span><br><span class="line">  #indexOf(var, from?)                                   -&gt; index | -1</span><br><span class="line">  #lastIndexOf(var, from?)                               -&gt; index | -1</span><br><span class="line">  #every(fn(val, index, @), that)                        -&gt; bool</span><br><span class="line">  #some(fn(val, index, @), that)                         -&gt; bool</span><br><span class="line">  #forEach(fn(val, index, @), that)                      -&gt; void</span><br><span class="line">  #map(fn(val, index, @), that)                          -&gt; array</span><br><span class="line">  #filter(fn(val, index, @), that)                       -&gt; array</span><br><span class="line">  #reduce(fn(memo, val, index, @), memo?)                -&gt; var</span><br><span class="line">  #reduceRight(fn(memo, val, index, @), memo?)           -&gt; var</span><br><span class="line">  #sort(fn?)                                             -&gt; @, invalid arguments fix</span><br><span class="line">  #@@iterator()                                          -&gt; iterator (values)</span><br><span class="line">  #@@unscopables                                         -&gt; object (cap)</span><br><span class="line">Arguments</span><br><span class="line">  #@@iterator() -&gt; iterator (values, available only in core-js methods)</span><br></pre></td></tr></table></figure></p><p>ES6: <code>String</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span></span><br><span class="line">  .fromCodePoint(...codePoints) -&gt; str</span><br><span class="line">  .raw(&#123;raw&#125;, ...substitutions) -&gt; str</span><br><span class="line">  #includes(str, from?) -&gt; bool</span><br><span class="line">  #startsWith(str, from?) -&gt; bool</span><br><span class="line">  #endsWith(str, from?) -&gt; bool</span><br><span class="line">  #repeat(num) -&gt; str</span><br><span class="line">  #codePointAt(pos) -&gt; uint</span><br><span class="line">  #trim() -&gt; str, ES6 fix</span><br><span class="line">  #anchor(name)     -&gt; str</span><br><span class="line">  #big()            -&gt; str</span><br><span class="line">  #blink()          -&gt; str</span><br><span class="line">  #bold()           -&gt; str</span><br><span class="line">  #fixed()          -&gt; str</span><br><span class="line">  #fontcolor(color) -&gt; str</span><br><span class="line">  #fontsize(size)   -&gt; str</span><br><span class="line">  #italics()        -&gt; str</span><br><span class="line">  #link(url)        -&gt; str</span><br><span class="line">  #small()          -&gt; str</span><br><span class="line">  #strike()         -&gt; str</span><br><span class="line">  #sub()            -&gt; str</span><br><span class="line">  #sup()            -&gt; str</span><br><span class="line">  #@@iterator() -&gt; iterator (code points)</span><br></pre></td></tr></table></figure></p><p>ES6: <code>RegExp</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">new</span>] <span class="built_in">RegExp</span>(pattern, flags?) -&gt; regexp, ES6 fix: can alter flags (IE9+)</span><br><span class="line">  #flags -&gt; str (IE9+)</span><br><span class="line">  #toString() -&gt; str, ES6 fixes</span><br><span class="line">  #@@match(str)             -&gt; array | null</span><br><span class="line">  #@@replace(str, replacer) -&gt; string</span><br><span class="line">  #@@search(str)            -&gt; index</span><br><span class="line">  #@@split(str, limit)      -&gt; array</span><br><span class="line"><span class="built_in">String</span></span><br><span class="line">  #match(tpl)             -&gt; var, ES6 fix for support @@match</span><br><span class="line">  #replace(tpl, replacer) -&gt; var, ES6 fix for support @@replace</span><br><span class="line">  #search(tpl)            -&gt; var, ES6 fix for support @@search</span><br><span class="line">  #split(tpl, limit)      -&gt; var, ES6 fix for support @@split, some fixes for old engines</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Number</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">new</span>] <span class="built_in">Number</span>(<span class="keyword">var</span>)         -&gt; number | number object</span><br><span class="line">  .isFinite(num)          -&gt; bool</span><br><span class="line">  .isNaN(num)             -&gt; bool</span><br><span class="line">  .isInteger(num)         -&gt; bool</span><br><span class="line">  .isSafeInteger(num)     -&gt; bool</span><br><span class="line">  .parseFloat(str)        -&gt; num</span><br><span class="line">  .parseInt(str)          -&gt; int</span><br><span class="line">  .EPSILON                -&gt; num</span><br><span class="line">  .MAX_SAFE_INTEGER       -&gt; int</span><br><span class="line">  .MIN_SAFE_INTEGER       -&gt; int</span><br><span class="line">  #toFixed(digits)        -&gt; string, fixes</span><br><span class="line">  #toPrecision(precision) -&gt; string, fixes</span><br><span class="line"><span class="built_in">parseFloat</span>(str)           -&gt; num, fixes</span><br><span class="line"><span class="built_in">parseInt</span>(str)             -&gt; int, fixes</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Math</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span></span><br><span class="line">  .acosh(num)     -&gt; num</span><br><span class="line">  .asinh(num)     -&gt; num</span><br><span class="line">  .atanh(num)     -&gt; num</span><br><span class="line">  .cbrt(num)      -&gt; num</span><br><span class="line">  .clz32(num)     -&gt; uint</span><br><span class="line">  .cosh(num)      -&gt; num</span><br><span class="line">  .expm1(num)     -&gt; num</span><br><span class="line">  .fround(num)    -&gt; num</span><br><span class="line">  .hypot(...args) -&gt; num</span><br><span class="line">  .imul(num, num) -&gt; int</span><br><span class="line">  .log1p(num)     -&gt; num</span><br><span class="line">  .log10(num)     -&gt; num</span><br><span class="line">  .log2(num)      -&gt; num</span><br><span class="line">  .sign(num)      -&gt; <span class="number">1</span> | <span class="number">-1</span> | <span class="number">0</span> | <span class="number">-0</span> | <span class="literal">NaN</span></span><br><span class="line">  .sinh(num)      -&gt; num</span><br><span class="line">  .tanh(num)      -&gt; num</span><br><span class="line">  .trunc(num)     -&gt; num</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Date</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span></span><br><span class="line">  .now()               -&gt; int</span><br><span class="line">  #toISOString()       -&gt; string</span><br><span class="line">  #toJSON()            -&gt; string</span><br><span class="line">  #toString()          -&gt; string</span><br><span class="line">  #@@toPrimitive(hint) -&gt; primitive</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(executor(resolve(<span class="keyword">var</span>), reject(<span class="keyword">var</span>))) -&gt; promise</span><br><span class="line">  #then(resolved(var), rejected(var))            -&gt; promise</span><br><span class="line">  #catch(rejected(var))                          -&gt; promise</span><br><span class="line">  .resolve(promise | <span class="keyword">var</span>)                        -&gt; promise</span><br><span class="line">  .reject(<span class="keyword">var</span>)                                   -&gt; promise</span><br><span class="line">  .all(iterable)                                 -&gt; promise</span><br><span class="line">  .race(iterable)                                -&gt; promise</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Collections</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>(iterable (entries) ?)     -&gt; map</span><br><span class="line">  #clear()                        -&gt; void</span><br><span class="line">  #delete(key)                    -&gt; bool</span><br><span class="line">  #forEach(fn(val, key, @), that) -&gt; void</span><br><span class="line">  #get(key)                       -&gt; val</span><br><span class="line">  #has(key)                       -&gt; bool</span><br><span class="line">  #set(key, val)                  -&gt; @</span><br><span class="line">  #size                           -&gt; uint</span><br><span class="line">  #values()                       -&gt; iterator</span><br><span class="line">  #keys()                         -&gt; iterator</span><br><span class="line">  #entries()                      -&gt; iterator</span><br><span class="line">  #@@iterator()                   -&gt; iterator (entries)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>(iterable?)              -&gt; set</span><br><span class="line">  #add(key)                     -&gt; @</span><br><span class="line">  #clear()                      -&gt; void</span><br><span class="line">  #delete(key)                  -&gt; bool</span><br><span class="line">  #forEach(fn(el, el, @), that) -&gt; void</span><br><span class="line">  #has(key)                     -&gt; bool</span><br><span class="line">  #size                         -&gt; uint</span><br><span class="line">  #values()                     -&gt; iterator</span><br><span class="line">  #keys()                       -&gt; iterator</span><br><span class="line">  #entries()                    -&gt; iterator</span><br><span class="line">  #@@iterator()                 -&gt; iterator (values)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">WeakMap</span>(iterable (entries) ?) -&gt; weakmap</span><br><span class="line">  #delete(key)                    -&gt; bool</span><br><span class="line">  #get(key)                       -&gt; val</span><br><span class="line">  #has(key)                       -&gt; bool</span><br><span class="line">  #set(key, val)                  -&gt; @</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">WeakSet</span>(iterable?) -&gt; weakset</span><br><span class="line">  #add(key)            -&gt; @</span><br><span class="line">  #delete(key)         -&gt; bool</span><br><span class="line">  #has(key)            -&gt; bool</span><br></pre></td></tr></table></figure></p><hr><p>ES6: <code>Symbol</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(description?)  -&gt; symbol</span><br><span class="line">  .hasInstance        -&gt; @@hasInstance</span><br><span class="line">  .isConcatSpreadable -&gt; @@isConcatSpreadable</span><br><span class="line">  .iterator           -&gt; @@iterator</span><br><span class="line">  .match              -&gt; @@match</span><br><span class="line">  .replace            -&gt; @@replace</span><br><span class="line">  .search             -&gt; @@search</span><br><span class="line">  .species            -&gt; @@species</span><br><span class="line">  .split              -&gt; @@split</span><br><span class="line">  .toPrimitive        -&gt; @@toPrimitive</span><br><span class="line">  .toStringTag        -&gt; @@toStringTag</span><br><span class="line">  .unscopables        -&gt; @@unscopables</span><br><span class="line">  .for(key)           -&gt; symbol</span><br><span class="line">  .keyFor(symbol)     -&gt; key</span><br><span class="line">  .useSimple()        -&gt; <span class="keyword">void</span></span><br><span class="line">  .useSetter()        -&gt; <span class="keyword">void</span></span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line">  .getOwnPropertySymbols(object) -&gt; array</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Typed Arrays</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(length) -&gt; buffer</span><br><span class="line">  .isView(<span class="keyword">var</span>) -&gt; bool</span><br><span class="line">  #slice(start = 0, end = @length) -&gt; buffer</span><br><span class="line">  #byteLength -&gt; uint</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">DataView</span>(buffer, byteOffset = <span class="number">0</span>, byteLength = buffer.byteLength - byteOffset) -&gt; view</span><br><span class="line">  #getInt8(offset)                          -&gt; int8</span><br><span class="line">  #getUint8(offset)                         -&gt; uint8</span><br><span class="line">  #getInt16(offset, littleEndian = false)   -&gt; int16</span><br><span class="line">  #getUint16(offset, littleEndian = false)  -&gt; uint16</span><br><span class="line">  #getInt32(offset, littleEndian = false)   -&gt; int32</span><br><span class="line">  #getUint32(offset, littleEndian = false)  -&gt; uint32</span><br><span class="line">  #getFloat32(offset, littleEndian = false) -&gt; float32</span><br><span class="line">  #getFloat64(offset, littleEndian = false) -&gt; float64</span><br><span class="line">  #setInt8(offset, value)                          -&gt; void</span><br><span class="line">  #setUint8(offset, value)                         -&gt; void</span><br><span class="line">  #setInt16(offset, value, littleEndian = false)   -&gt; void</span><br><span class="line">  #setUint16(offset, value, littleEndian = false)  -&gt; void</span><br><span class="line">  #setInt32(offset, value, littleEndian = false)   -&gt; void</span><br><span class="line">  #setUint32(offset, value, littleEndian = false)  -&gt; void</span><br><span class="line">  #setFloat32(offset, value, littleEndian = false) -&gt; void</span><br><span class="line">  #setFloat64(offset, value, littleEndian = false) -&gt; void</span><br><span class="line">  #buffer     -&gt; buffer</span><br><span class="line">  #byteLength -&gt; uint</span><br><span class="line">  #byteOffset -&gt; uint</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Int8Array</span>,</span><br><span class="line">  <span class="built_in">Uint8Array</span>,</span><br><span class="line">  <span class="built_in">Uint8ClampedArray</span>,</span><br><span class="line">  <span class="built_in">Int16Array</span>,</span><br><span class="line">  <span class="built_in">Uint16Array</span>,</span><br><span class="line">  <span class="built_in">Int32Array</span>,</span><br><span class="line">  <span class="built_in">Uint32Array</span>,</span><br><span class="line">  <span class="built_in">Float32Array</span>,</span><br><span class="line">  <span class="built_in">Float64Array</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">new</span> %TypedArray%(length)    -&gt; typed</span><br><span class="line">  <span class="keyword">new</span> %TypedArray%(typed)     -&gt; typed</span><br><span class="line">  <span class="keyword">new</span> %TypedArray%(arrayLike) -&gt; typed</span><br><span class="line">  <span class="keyword">new</span> %TypedArray%(iterable)  -&gt; typed</span><br><span class="line">  <span class="keyword">new</span> %TypedArray%(buffer, byteOffset = <span class="number">0</span>, length = (buffer.byteLength - byteOffset) / @BYTES_PER_ELEMENT) -&gt; typed</span><br><span class="line">  .BYTES_PER_ELEMENT -&gt; uint</span><br><span class="line">  .from(arrayLike | iterable, mapFn(val, index)?, that) -&gt; typed</span><br><span class="line">  .of(...args) -&gt; typed</span><br><span class="line">  #BYTES_PER_ELEMENT -&gt; uint</span><br><span class="line">  #copyWithin(target = 0, start = 0, end = @length) -&gt; @</span><br><span class="line">  #every(fn(val, index, @), that) -&gt; bool</span><br><span class="line">  #fill(val, start = 0, end = @length) -&gt; @</span><br><span class="line">  #filter(fn(val, index, @), that) -&gt; typed</span><br><span class="line">  #find(fn(val, index, @), that) -&gt; val</span><br><span class="line">  #findIndex(fn(val, index, @), that) -&gt; index</span><br><span class="line">  #forEach(fn(val, index, @), that) -&gt; void</span><br><span class="line">  #indexOf(var, from?) -&gt; int</span><br><span class="line">  #join(string = ',') -&gt; string</span><br><span class="line">  #lastIndexOf(var, from?) -&gt; int</span><br><span class="line">  #map(fn(val, index, @), that) -&gt; typed</span><br><span class="line">  #reduce(fn(memo, val, index, @), memo?) -&gt; var</span><br><span class="line">  #reduceRight(fn(memo, val, index, @), memo?) -&gt; var</span><br><span class="line">  #reverse() -&gt; @</span><br><span class="line">  #set(arrayLike, offset = 0) -&gt; void</span><br><span class="line">  #slice(start = 0, end = @length) -&gt; typed</span><br><span class="line">  #some(fn(val, index, @), that) -&gt; bool</span><br><span class="line">  #sort(fn(a, b)?) -&gt; @</span><br><span class="line">  #subarray(start = 0, end = @length) -&gt; typed</span><br><span class="line">  #toString() -&gt; string</span><br><span class="line">  #toLocaleString() -&gt; string</span><br><span class="line">  #values()     -&gt; iterator</span><br><span class="line">  #keys()       -&gt; iterator</span><br><span class="line">  #entries()    -&gt; iterator</span><br><span class="line">  #@@iterator() -&gt; iterator (values)</span><br><span class="line">  #buffer     -&gt; buffer</span><br><span class="line">  #byteLength -&gt; uint</span><br><span class="line">  #byteOffset -&gt; uint</span><br><span class="line">  #length     -&gt; uint</span><br></pre></td></tr></table></figure></p><p>ES6: <code>Reflect</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span></span><br><span class="line">  .apply(target, thisArgument, argumentsList) -&gt; <span class="keyword">var</span></span><br><span class="line">  .construct(target, argumentsList, newTarget?) -&gt; object</span><br><span class="line">  .defineProperty(target, propertyKey, attributes) -&gt; bool</span><br><span class="line">  .deleteProperty(target, propertyKey) -&gt; bool</span><br><span class="line">  .enumerate(target) -&gt; iterator (removed <span class="keyword">from</span> the spec and will be removed <span class="keyword">from</span> core-js@<span class="number">3</span>)</span><br><span class="line">  .get(target, propertyKey, receiver?) -&gt; <span class="keyword">var</span></span><br><span class="line">  .getOwnPropertyDescriptor(target, propertyKey) -&gt; desc</span><br><span class="line">  .getPrototypeOf(target) -&gt; object | <span class="literal">null</span></span><br><span class="line">  .has(target, propertyKey) -&gt; bool</span><br><span class="line">  .isExtensible(target) -&gt; bool</span><br><span class="line">  .ownKeys(target) -&gt; array</span><br><span class="line">  .preventExtensions(target) -&gt; bool</span><br><span class="line">  .set(target, propertyKey, V, receiver?) -&gt; bool</span><br><span class="line">  .setPrototypeOf(target, proto) -&gt; bool (required __proto__ - IE11+)</span><br></pre></td></tr></table></figure></p><hr><p>ES7: Stage 4 proposals<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span></span><br><span class="line">  #includes(var, from?) -&gt; bool</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Int8Array</span>,</span><br><span class="line">  <span class="built_in">Uint8Array</span>,</span><br><span class="line">  <span class="built_in">Uint8ClampedArray</span>,</span><br><span class="line">  <span class="built_in">Int16Array</span>,</span><br><span class="line">  <span class="built_in">Uint16Array</span>,</span><br><span class="line">  <span class="built_in">Int32Array</span>,</span><br><span class="line">  <span class="built_in">Uint32Array</span>,</span><br><span class="line">  <span class="built_in">Float32Array</span>,</span><br><span class="line">  <span class="built_in">Float64Array</span></span><br><span class="line">&#125;</span><br><span class="line">  #includes(var, from?) -&gt; bool</span><br><span class="line">  </span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line">  .values(object) -&gt; array</span><br><span class="line">  .entries(object) -&gt; array</span><br><span class="line">  .getOwnPropertyDescriptors(object) -&gt; object</span><br><span class="line">  </span><br><span class="line"><span class="built_in">String</span></span><br><span class="line">  #padStart(length, fillStr = ' ') -&gt; string</span><br><span class="line">  #padEnd(length, fillStr = ' ') -&gt; string</span><br><span class="line">  </span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line">  #__defineSetter__(key, fn) -&gt; void</span><br><span class="line">  #__defineGetter__(key, fn) -&gt; void</span><br><span class="line">  #__lookupSetter__(key) -&gt; fn | void</span><br><span class="line">  #__lookupGetter__(key) -&gt; fn | void</span><br></pre></td></tr></table></figure></p><p>ES7: Stage 3 proposals<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">global -&gt; object</span><br><span class="line">System</span><br><span class="line">  .global -&gt; object (obsolete)</span><br><span class="line"></span><br><span class="line">global.Array === <span class="built_in">Array</span>; <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">  #finally(onFinally()) -&gt; promise</span><br><span class="line">  </span><br><span class="line"><span class="built_in">Symbol</span></span><br><span class="line">  .asyncIterator -&gt; @@asyncIterator</span><br></pre></td></tr></table></figure></p><p>ES7: Stage 2 proposals<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span></span><br><span class="line">  #trimLeft()  -&gt; string</span><br><span class="line">  #trimRight() -&gt; string</span><br><span class="line">  #trimStart() -&gt; string</span><br><span class="line">  #trimEnd()   -&gt; string</span><br></pre></td></tr></table></figure></p><p>ES7: Stage 1 proposals<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span></span><br><span class="line">  .try(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)) -&gt; <span class="title">promise</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Array</span></span></span><br><span class="line"><span class="function">  #<span class="title">flatten</span>(<span class="params">depthArg = <span class="number">1</span></span>) -&gt; <span class="title">array</span></span></span><br><span class="line"><span class="function">  #<span class="title">flatMap</span>(<span class="params">fn(val, key, @</span>), <span class="title">that</span>) -&gt; <span class="title">array</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Set</span></span></span><br><span class="line"><span class="function">  .<span class="title">of</span>(<span class="params">...args</span>) -&gt; <span class="title">set</span></span></span><br><span class="line"><span class="function">  .<span class="title">from</span>(<span class="params">iterable, mapFn(val, index</span>)?, <span class="title">that</span>?) -&gt; <span class="title">set</span></span></span><br><span class="line"><span class="function"><span class="title">Map</span></span></span><br><span class="line"><span class="function">  .<span class="title">of</span>(<span class="params">...args</span>) -&gt; <span class="title">map</span></span></span><br><span class="line"><span class="function">  .<span class="title">from</span>(<span class="params">iterable, mapFn(val, index</span>)?, <span class="title">that</span>?) -&gt; <span class="title">map</span></span></span><br><span class="line"><span class="function"><span class="title">WeakSet</span></span></span><br><span class="line"><span class="function">  .<span class="title">of</span>(<span class="params">...args</span>) -&gt; <span class="title">weakset</span></span></span><br><span class="line"><span class="function">  .<span class="title">from</span>(<span class="params">iterable, mapFn(val, index</span>)?, <span class="title">that</span>?) -&gt; <span class="title">weakset</span></span></span><br><span class="line"><span class="function"><span class="title">WeakMap</span></span></span><br><span class="line"><span class="function">  .<span class="title">of</span>(<span class="params">...args</span>) -&gt; <span class="title">weakmap</span></span></span><br><span class="line"><span class="function">  .<span class="title">from</span>(<span class="params">iterable, mapFn(val, index</span>)?, <span class="title">that</span>?) -&gt; <span class="title">weakmap</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="title">String</span></span></span><br><span class="line"><span class="function">  #<span class="title">matchAll</span>(<span class="params">regexp</span>) -&gt; <span class="title">iterator</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="title">new</span> <span class="title">Observable</span>(<span class="params">fn</span>)             -&gt; <span class="title">observable</span></span></span><br><span class="line"><span class="function">  #<span class="title">subscribe</span>(<span class="params">observer</span>)         -&gt; <span class="title">subscription</span></span></span><br><span class="line"><span class="function">  #<span class="title">forEach</span>(<span class="params">fn</span>)                 -&gt; <span class="title">promise</span></span></span><br><span class="line"><span class="function">  #@@<span class="title">observable</span>(<span class="params"></span>)              -&gt; @</span></span><br><span class="line"><span class="function">  .<span class="title">of</span>(<span class="params">...items</span>)                -&gt; <span class="title">observable</span></span></span><br><span class="line"><span class="function">  .<span class="title">from</span>(<span class="params">observable | iterable</span>) -&gt; <span class="title">observable</span></span></span><br><span class="line"><span class="function">  .@@<span class="title">species</span>                   -&gt; @</span></span><br><span class="line"><span class="function"><span class="title">Symbol</span></span></span><br><span class="line"><span class="function">  .<span class="title">observable</span>                  -&gt; @@<span class="title">observable</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="title">Math</span></span></span><br><span class="line"><span class="function">  .<span class="title">DEG_PER_RAD</span> -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">RAD_PER_DEG</span> -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">clamp</span>(<span class="params">x, lower, upper</span>) -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">degrees</span>(<span class="params">radians</span>) -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">fscale</span>(<span class="params">x, inLow, inHigh, outLow, outHigh</span>) -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">radians</span>(<span class="params">degrees</span>) -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  .<span class="title">scale</span>(<span class="params">x, inLow, inHigh, outLow, outHigh</span>) -&gt; <span class="title">number</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="title">Math</span></span></span><br><span class="line"><span class="function">  .<span class="title">signbit</span>(<span class="params">x</span>) -&gt; <span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p><p>…ES7: Stage 0 proposals and below</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ECMAScript 5 (ES5)：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript 6 (ES2015/ES6) / ECMAScript 2015 (ES2015)：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅&lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这张兼容性表&lt;/a&gt;来查看不同浏览器和工具的实现情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript 2016 (ES2016/ES7)：第七版 ECMAScript 修订.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript 2017 (ES2017)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对常用的API作个简单说明(按需引入polyfill), &lt;a href=&quot;https://github.com/zloirock/core-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点此查看Github链接原文&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Technology/"/>
    
      <category term="Javascript" scheme="https://mrzzcn.github.io/categories/Technology/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://mrzzcn.github.io/tags/Javascript/"/>
    
      <category term="core-js" scheme="https://mrzzcn.github.io/tags/core-js/"/>
    
      <category term="babel" scheme="https://mrzzcn.github.io/tags/babel/"/>
    
      <category term="es6" scheme="https://mrzzcn.github.io/tags/es6/"/>
    
      <category term="es7" scheme="https://mrzzcn.github.io/tags/es7/"/>
    
  </entry>
  
  <entry>
    <title>Git 工作流</title>
    <link href="https://mrzzcn.github.io/2015/11/17/git-flow/"/>
    <id>https://mrzzcn.github.io/2015/11/17/git-flow/</id>
    <published>2015-11-17T07:24:44.000Z</published>
    <updated>2019-04-27T01:43:35.930Z</updated>
    
    <content type="html"><![CDATA[<p>简单整理一下多人同一远程仓库git工作流模式。</p><h2 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1. 初始化本地仓库"></a>1. 初始化本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 已有项目</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:mrzzcn/mrzzcn.github.io.git</span><br><span class="line"></span><br><span class="line">// 新建项目</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-分支"><a href="#2-分支" class="headerlink" title="2. 分支"></a>2. 分支</h2><p>三个基本分支：<br>master: 稳定分支，用于发布和修改产品bug;<br>test: 测试分支，用于发布测试服务器共内部测试;<br>dev: 开发分支，用于开发时测试和发布，随时合并新功能代码或bug修复;<br><img src="/2015/11/17/git-flow/basic-branch.png" title="基本分支"></p><h2 id="3-开发流程"><a href="#3-开发流程" class="headerlink" title="3. 开发流程"></a>3. 开发流程</h2><p>1 每个新功能基于<code>dev</code>分支，创建新分支开始，例如现在要增加一个登录功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于dev分支</span><br><span class="line">git checkout -b feature-login</span><br><span class="line"></span><br><span class="line">// more coding</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'feature-login completed'</span></span><br></pre></td></tr></table></figure></p><p>2 新功能完成，自己测试之后，需要合并到dev分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于dev分支</span><br><span class="line">git pull // 首先拉取远程分支</span><br><span class="line"></span><br><span class="line">// dev分支（冲突解决完成）clean之后</span><br><span class="line">git checkout feature-login</span><br><span class="line">git rebase dev // 保留dev的其他人的提交记录并合并dev分支到当前新功能分支</span><br><span class="line"></span><br><span class="line">// dev 分支合并之后（可能有冲突需要解决）</span><br><span class="line">git checkout dev</span><br><span class="line">git rebase feature-login</span><br></pre></td></tr></table></figure></p><p>这时的分支状态：<br><img src="/2015/11/17/git-flow/feature-login-rebased.png" title="feature-login 被合并到dev分支之后"><br>3 接下来，可以删除feature-login分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于dev分支</span><br><span class="line">git branch -d feature-login</span><br></pre></td></tr></table></figure></p><p>4 这时，feature-login 基本开发完成，可以合并到test分支，发布给QA测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于 <span class="built_in">test</span> 分支</span><br><span class="line">git rebase dev</span><br></pre></td></tr></table></figure></p><p>5 如果QA测出bug需要修改，或者临时有需求变动，需要重复上述步骤，不过命名可以修改，例如 fix-login-bug-1024。如果是细节调整或者是晓得修改则可以在dev分支直接执行。<br>6 所有功能测试无误之后，可以合并到 <code>master</code> 分支，发布生产环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于 master 分支</span><br><span class="line">git rebase dev </span><br><span class="line"></span><br><span class="line">// 也可能根据不同功能的测试状态，会执行不同的合并操作</span><br><span class="line">git merge ...</span><br></pre></td></tr></table></figure></p><h2 id="4-线上bug临时修改"><a href="#4-线上bug临时修改" class="headerlink" title="4. 线上bug临时修改"></a>4. 线上bug临时修改</h2><p>如果生产环境突然出现bug需要修改，或者要改一些细节部分，则需要直接在 <code>master</code> 上执行，然后合并到 <code>dev</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 当前位于 master 分支</span><br><span class="line">git checkout -b hotfix-bug1117</span><br><span class="line"></span><br><span class="line">// more coding</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'fixed hotfix-bug1117'</span></span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line">git rebase hotfix-bug1117</span><br><span class="line"></span><br><span class="line">// 然后发布</span><br><span class="line"></span><br><span class="line">// 最后，需要把修改合并到dev分支，假如刚才的提交commit是abcdefg</span><br><span class="line">git checkout dev</span><br><span class="line">git cherry-pick abcdefg</span><br><span class="line">// 可能需要解决冲突</span><br><span class="line"></span><br><span class="line">// 最后 删除 `hotfix-bug1117` 分支</span><br><span class="line">git branch -d hotfix-bug1117</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单整理一下多人同一远程仓库git工作流模式。&lt;/p&gt;
&lt;h2 id=&quot;1-初始化本地仓库&quot;&gt;&lt;a href=&quot;#1-初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 初始化本地仓库&quot;&gt;&lt;/a&gt;1. 初始化本地仓库&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 已有项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git@github.com:mrzzcn/mrzzcn.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 新建项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://mrzzcn.github.io/categories/Technology/"/>
    
      <category term="Git" scheme="https://mrzzcn.github.io/categories/Technology/Git/"/>
    
    
      <category term="随笔" scheme="https://mrzzcn.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Git" scheme="https://mrzzcn.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript The Good Parts</title>
    <link href="https://mrzzcn.github.io/2015/05/24/JavaScript-The-Good-Parts/"/>
    <id>https://mrzzcn.github.io/2015/05/24/JavaScript-The-Good-Parts/</id>
    <published>2015-05-24T09:30:57.000Z</published>
    <updated>2019-04-27T01:43:35.928Z</updated>
    
    <content type="html"><![CDATA[<h5 id="使用一个method-方法定义新方法"><a href="#使用一个method-方法定义新方法" class="headerlink" title="使用一个method 方法定义新方法"></a>使用一个method 方法定义新方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params">name, func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.prototype[name]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype[name] = func;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="根据数字的正负来判断是使用Math-ceiling-还是Math-floor"><a href="#根据数字的正负来判断是使用Math-ceiling-还是Math-floor" class="headerlink" title="根据数字的正负来判断是使用Math.ceiling 还是Math.floor"></a>根据数字的正负来判断是使用Math.ceiling 还是Math.floor</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.method(<span class="string">"integer"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>[<span class="keyword">this</span> &lt; <span class="number">0</span> ? <span class="string">'ceil'</span> : <span class="string">'floor'</span>](<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h5 id="移除字符串首尾的空白"><a href="#移除字符串首尾的空白" class="headerlink" title="移除字符串首尾的空白"></a>移除字符串首尾的空白</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.method(<span class="string">"trim"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h5 id="闭包演示"><a href="#闭包演示" class="headerlink" title="闭包演示"></a>闭包演示</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span> (<span class="params">inc</span>) </span>&#123;</span><br><span class="line">            value += <span class="keyword">typeof</span> inc === <span class="string">"number"</span> ? inc : <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        getValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><hr><h5 id="缓存中间计算结果-斐波纳挈数组"><a href="#缓存中间计算结果-斐波纳挈数组" class="headerlink" title="缓存中间计算结果 - 斐波纳挈数组"></a>缓存中间计算结果 - 斐波纳挈数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">var</span> memoizer = <span class="function"><span class="keyword">function</span> (<span class="params">memo, formula</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> recur = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'number'</span>) &#123;</span><br><span class="line">            result = formula(recur, n);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> recur;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = memoizer([<span class="number">0</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span> (<span class="params">recur, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> recur(n<span class="number">-1</span>) + recur(n - <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%d : %d"</span>, i, fibonacci(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展用法 阶乘</span></span><br><span class="line"><span class="keyword">var</span> factorial = memoizer([<span class="number">1</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span> (<span class="params">recur, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * recur (n - <span class="number">1</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%d : %d"</span>, i, factorial(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="如何实现继承-函数化"><a href="#如何实现继承-函数化" class="headerlink" title="如何实现继承 - 函数化"></a>如何实现继承 - 函数化</h5><ol><li>创建一个对象</li><li>有选择地定义私有实例变量和方法。这些就是函数中通过<code>var</code>语句定义的普通变量</li><li>给这个新对象扩充方法。这些方法拥有特权去访问参数，以及上一步中定义的变量。</li><li>返回这个新对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是一个函数化构造器的伪代码模板（加粗的文本表示强调）：</span></span><br><span class="line"><span class="keyword">var</span> **<span class="keyword">constructor</span>** = function (spec, my) &#123;</span><br><span class="line">    <span class="comment">// 代码快内部不知道怎么加粗，哪位大神指点一下</span></span><br><span class="line">    <span class="keyword">var</span> that, **其他私有变量**;</span><br><span class="line">    my = my || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **把共享的变量和函数添加到my中**</span></span><br><span class="line"></span><br><span class="line">    that = &#123;</span><br><span class="line">        name: <span class="string">"**一个新对象**"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **给that添加特权方法**</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// spec 对象包含构造器需要构造一个新实例的所哟信息。spec 的内容可能会被复制到私有变量中，或者被其他函数改变，或者方法可以在需要的时候访问spec的信息。（一个简化的方式是替换spec为一个单一的值。当构造对象过程中并不需要整个spec对象的时候，这是有用的。）</span></span><br><span class="line"><span class="comment">// my 对象是一个为继承链中的构造器提供秘密共享的容器。my对象可以选择性地使用。如果没有传入一个my对象，那么会创建一个my对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mammal = <span class="function"><span class="keyword">function</span> (<span class="params">spec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    that.get_name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spec.name;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    that.says = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spec.saying || <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="function"><span class="keyword">function</span> (<span class="params">spec</span>) </span>&#123;</span><br><span class="line">    spec.saying = spec.saying || <span class="string">'meow'</span>;</span><br><span class="line">    <span class="keyword">var</span> that = mammal(spec);</span><br><span class="line">    that.purr = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, s = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s) &#123;</span><br><span class="line">                s += <span class="string">"-"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s += <span class="string">"r"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;;</span><br><span class="line">    that.get_name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> that.says() + <span class="string">" "</span> + spec.name + <span class="string">" "</span> + that.says();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCat = cat(&#123;<span class="attr">name</span>: <span class="string">"Henrietta"</span>&#125;);</span><br></pre></td></tr></table></figure><h5 id="函数化模式还提供了一个处理父类方法的方法。我们会构造一个superior方法，它取得一个方法名并返回调用那个方法的函数。该函数会调用原来的方法，尽管属性已经变化了。"><a href="#函数化模式还提供了一个处理父类方法的方法。我们会构造一个superior方法，它取得一个方法名并返回调用那个方法的函数。该函数会调用原来的方法，尽管属性已经变化了。" class="headerlink" title="函数化模式还提供了一个处理父类方法的方法。我们会构造一个superior方法，它取得一个方法名并返回调用那个方法的函数。该函数会调用原来的方法，尽管属性已经变化了。"></a>函数化模式还提供了一个处理父类方法的方法。我们会构造一个superior方法，它取得一个方法名并返回调用那个方法的函数。该函数会调用原来的方法，尽管属性已经变化了。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.method(<span class="string">'superior'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>,</span><br><span class="line">        method = that[name];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.apply(that, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>让我们在coolcat上试验一下，coolcat就像cat一样，除了它有一个更酷的调用父类方法的get_name方法。它只需要一点点的准备工作。我们会声明一个super_get_name变量，并且把调用superior方法所返回的结果赋值给它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coolcat = <span class="function"><span class="keyword">function</span> (<span class="params">spec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = cat(spec),</span><br><span class="line">        super_get_name = that.superior(<span class="string">'get_name'</span>);</span><br><span class="line">    that.get_name = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'like '</span> + super_get_name() + <span class="string">' baby'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCoolCat = coolcat(&#123;<span class="attr">name</span>: <span class="string">'Bix'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> name = myCoolCat.get_name();</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "like meow Bix meow baby"</span></span><br></pre></td></tr></table></figure></p><hr><h5 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h5><p>我们可以从一套部件中把对象组装出来。例如，我们可以构造一个给任何对象添加简单事件处理特性的函数。他会给对象添加一个<code>on</code>方法、一个<code>fire</code>方法和一个私有的事件注册表对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventuality = <span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> registry = &#123;&#125;;</span><br><span class="line">    that.fire = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在一个对象上触发一个事件。该事件可以是一个包含事件名称的字符串</span></span><br><span class="line">        <span class="comment">// 或者是一个拥有包含事件名称的 type 属性的对象。</span></span><br><span class="line">        <span class="comment">// 通过'on'方法注册的事件处理程序中匹配事件名称的函数将被调用。</span></span><br><span class="line">        <span class="keyword">var</span> array,</span><br><span class="line">            func,</span><br><span class="line">            handler,</span><br><span class="line">            i,</span><br><span class="line">            type = <span class="keyword">typeof</span> event === <span class="string">'string'</span> ? event : event.type;</span><br><span class="line">        <span class="keyword">if</span> (registry.hasOwnProperty(type)) &#123;</span><br><span class="line">            array = registry[type];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">                handler = array[i];</span><br><span class="line">                <span class="comment">// 每个处理程序包含一个方法和一组可选的参数。</span></span><br><span class="line">                <span class="comment">// 如果该方法是一个字符串形式的名字，那么寻找到该函数。</span></span><br><span class="line">                func = handler.method;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> func === <span class="string">'string'</span>) &#123;</span><br><span class="line">                    func = <span class="keyword">this</span>[func];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 调用一个处理程序。如果该条目包含参数，那么传递它们过去。否则，传递该事件对象。</span></span><br><span class="line">                func.apply(<span class="keyword">this</span>, handler.parameters || [event]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    that.on = <span class="function"><span class="keyword">function</span> (<span class="params">type, method, parameters</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注册一个事件。构造一条处理程序条目。将它插入到处理程序数组中，</span></span><br><span class="line">        <span class="comment">// 如果这种类型的事件还不存在，就构造一个。</span></span><br><span class="line">        <span class="keyword">var</span> handler = &#123;</span><br><span class="line">            method: method,</span><br><span class="line">            parameters: parameters</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (registry.hasOwnProperty(type)) &#123;</span><br><span class="line">            registry[type].push(handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registry[type] = [handler];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们可以在任何单独的对象上调用eventuality, 授予它事件处理方法。我们也可以赶在<code>that</code>被返回之前在一个构造器函数中调用它 <code>eventuality(that);</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">eventuality(myCoolCat);</span><br><span class="line">myCoolCat.health = <span class="number">100</span>;</span><br><span class="line">myCoolCat.on(<span class="string">'dead'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = event.date;</span><br><span class="line">    <span class="keyword">var</span> killer = event.killer;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%s killed me at %s"</span>, killer, date);</span><br><span class="line">&#125;);</span><br><span class="line">myCoolCat.on(<span class="string">'hurt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.health -= <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> event = &#123;</span><br><span class="line">            type: <span class="string">'dead'</span>,</span><br><span class="line">            killer: <span class="string">'stone from sky'</span>,</span><br><span class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.fire(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nothing, who is the strong guy.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myCoolCat.fire(<span class="string">"hurt"</span>); <span class="comment">//nothing, who is the strong guy.</span></span><br><span class="line">myCoolCat.fire(<span class="string">"hurt"</span>); <span class="comment">//stone from sky killed me at Sat Mar 14 2015 15:47:29 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure></p><hr><h5 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h5><p>javascript 编程中，一个常见的错误是在必须使用数组时使用了对象，或者在必须使用对象时使用了数组。其实规则很简单：当属性名是小而连续的整数时，你应该使用数组。否则，使用对象。<br>javascript 本身没有一个好的机制来区分数组和对象。我们可以通过定义自己的is_array函数来弥补这个缺陷：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> is_array = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">        &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span></span><br><span class="line">        &amp;&amp; value.constructor === <span class="built_in">Array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不过该方法在识别从不同的窗口(window)或者frame里构造的数组时会失败。下面是一个更好的方式</span></span><br><span class="line"><span class="comment">// 上面这句话这里本人尚未理解，请高手指点</span></span><br><span class="line"><span class="keyword">var</span> is_array = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.apply(value) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="为数组扩充reduce函数"><a href="#为数组扩充reduce函数" class="headerlink" title="为数组扩充reduce函数"></a>为数组扩充reduce函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.method(<span class="string">'reduce'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">f, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        value = f(<span class="keyword">this</span>[i], value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// DEMO</span></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = data.reduce(add, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">// 108</span></span><br><span class="line"><span class="keyword">var</span> product = data.reduce(mult, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(product); <span class="comment">// 7418880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为数组其实就是对象，所以我们可以直接给一个单独的数组添加方法</span></span><br><span class="line">data.total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.reduce(add, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> total = data.total();</span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 108</span></span><br></pre></td></tr></table></figure><h5 id="为数组指定初始值"><a href="#为数组指定初始值" class="headerlink" title="为数组指定初始值"></a>为数组指定初始值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.dim = <span class="function"><span class="keyword">function</span> (<span class="params">dimension, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = [], i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dimension; i += <span class="number">1</span>) &#123;</span><br><span class="line">        a[i] = initial;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myArray = <span class="built_in">Array</span>.dim(<span class="number">10</span>, <span class="number">0</span>); <span class="comment">//[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// 注意这里不能使用我们之前说的method方法，应为那个方法是给某个类型的每一个具体的对象增加方法的，而这里我们是给Array这个 类型 增加方法，类似于某些静态语言中的静态方法或者类方法</span></span><br></pre></td></tr></table></figure><h5 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h5><p><code>sort</code> 方法会<code>array</code>中的内容进行排序。但是它不能正确第给一组数字排序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNumbers = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];</span><br><span class="line">myNumbers.sort(); <span class="comment">// [15, 16, 23, 4, 42, 8]</span></span><br></pre></td></tr></table></figure></p><p>javascript 的默认比较函数把要被排序的元素都视为字符串。它尚未足够智能到在比较这些元素之前先检测他们的类型，所以当它比较这些数字的时候，会把它们转化为字符串，于是得到一个错的离谱的结果。<br>辛运的是，你可以使用自己的比较函数来替换默认的比较函数。</p><blockquote><p>你的比较函数应该接受两个参数，并且如果这两个参数相等则返回0，如果第1个参数应该排列在前面，则返回一个负数，如果第2个参数应该排在前面，则返回一个正数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myNumbers.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;); <span class="comment">// [4, 8, 15, 16, 23, 42]</span></span><br></pre></td></tr></table></figure><p>上面这个函数可以使数字正确排序，但它不能使字符串排序。如果我们想要给任何包含简单值的数组排序，必须要做更多的工作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStrings = [<span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'a'</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];</span><br><span class="line">myStrings.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;); <span class="comment">//[4, 8, 15, 16, 23, 42, "a", "aa", "bb"]</span></span><br></pre></td></tr></table></figure></p><h5 id="对象数组排序"><a href="#对象数组排序" class="headerlink" title="对象数组排序"></a>对象数组排序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by 函数接受一个成员名字字符串做为参数，</span></span><br><span class="line"><span class="comment">// 并返回一个可以用来对包含该成员的对象数组的进行排序的比较函数</span></span><br><span class="line"><span class="keyword">var</span> by = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a, b;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> p === <span class="string">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</span><br><span class="line">            a = o[name];</span><br><span class="line">            b = p[name];</span><br><span class="line">            <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> &#123;</span><br><span class="line">                name: <span class="string">'Error'</span>,</span><br><span class="line">                message: <span class="string">'Expected an object when sorting by '</span> + name</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myPeople = [</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Joe'</span>,      <span class="attr">last</span>: <span class="string">'Beasser'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Moe'</span>,      <span class="attr">last</span>: <span class="string">'Howard'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Joe'</span>,      <span class="attr">last</span>: <span class="string">'DeRita'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Shemp'</span>,    <span class="attr">last</span>: <span class="string">'Howard'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Larry'</span>,    <span class="attr">last</span>: <span class="string">'Fine'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">first</span>: <span class="string">'Curly'</span>,    <span class="attr">last</span>: <span class="string">'Howard'</span>&#125;</span><br><span class="line">];</span><br><span class="line">myPeople.sort(by(<span class="string">'first'</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">&#123;first: "Curly",    last: "Howard"&#125;,</span></span><br><span class="line"><span class="comment">&#123;first: "Joe",      last: "Beasser"&#125;,</span></span><br><span class="line"><span class="comment">&#123;first: "Joe",      last: "DeRita"&#125;,</span></span><br><span class="line"><span class="comment">&#123;first: "Larry",    last: "Fine"&#125;,</span></span><br><span class="line"><span class="comment">&#123;first: "Moe",      last: "Howard"&#125;,</span></span><br><span class="line"><span class="comment">&#123;tfirst: "Shemp",   last: "Howard"&#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>sort 方法是不稳定的</p><blockquote><p>排序的稳定性是指排序后数组中的相等值的相对位置没有发生改变，而不稳定性排序则会改变相等值的相对位置。详细内容参见<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E7.9A.84.E6.8E.92.E5.BA.8F" target="_blank" rel="noopener">排序算法</a>。JavaScript的<code>sort</code>方法的稳定性根据不同浏览器的实现而不一致。可参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">Array.prototype.sort</a>中的介绍。</p></blockquote><p>下面的调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myPeople.sort(by(<span class="string">'last'</span>)).sort(by(<span class="string">'first'</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">&#123;"first": "Curly",  "last": "Howard"&#125;,</span></span><br><span class="line"><span class="comment">&#123;"first": "Joe",    "last": "Beasser"&#125;,</span></span><br><span class="line"><span class="comment">&#123;"first": "Joe",    "last": "DeRita"&#125;,</span></span><br><span class="line"><span class="comment">&#123;"first": "Larry",  "last": "Fine"&#125;,</span></span><br><span class="line"><span class="comment">&#123;"first": "Moe",    "last": "Howard"&#125;,</span></span><br><span class="line"><span class="comment">&#123;"first": "Shemp",  "last": "Howard"&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>不能保证产生正确的序列。如果你想基于多个键值进行排序，你需要再次做更多的工作。我们可以修改by函数，让其可以接受第2个参数，当主要的键值产生一个匹配的时候，另一个compare方法将被调用以决出高下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by 函数接受一个成员名字字符串和一个可选的次要比较函数做为参数，</span></span><br><span class="line"><span class="comment">// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数。</span></span><br><span class="line"><span class="comment">// 当 o[name] 和 p[name] 相等时，次要比较函数被用来决出高下。</span></span><br><span class="line"><span class="keyword">var</span> by = <span class="function"><span class="keyword">function</span> (<span class="params">name, minor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a, b;</span><br><span class="line">        <span class="keyword">if</span> (o &amp;&amp; p &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> p === <span class="string">'object'</span>) &#123;</span><br><span class="line">            a = o[name];</span><br><span class="line">            b = p[name];</span><br><span class="line">            <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> minor === <span class="string">'function'</span> ? minor(o, p) : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> &#123;</span><br><span class="line">                name: <span class="string">'Error'</span>,</span><br><span class="line">                message: <span class="string">'Expected an object when sorting by '</span> + name</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">myPeople.sort(by(<span class="string">'last'</span>, by(<span class="string">'first'</span>)));</span><br><span class="line">[</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Joe"</span>,    <span class="string">"last"</span>: <span class="string">"Beasser"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Joe"</span>,    <span class="string">"last"</span>: <span class="string">"DeRita"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Larry"</span>,  <span class="string">"last"</span>: <span class="string">"Fine"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Curly"</span>,  <span class="string">"last"</span>: <span class="string">"Howard"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Moe"</span>,    <span class="string">"last"</span>: <span class="string">"Howard"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"first"</span>: <span class="string">"Shemp"</span>,  <span class="string">"last"</span>: <span class="string">"Howard"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h5 id="正则表达式-解析URL"><a href="#正则表达式-解析URL" class="headerlink" title="正则表达式 - 解析URL"></a>正则表达式 - 解析URL</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_url = <span class="regexp">/^(?:([A-Za-z]+):)?(\/&#123;0,3&#125;)([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/</span>;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://www.ora.com:80/goodparts?q#fragment"</span>;</span><br><span class="line"><span class="keyword">var</span> result = parse_url.exec(url);</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">'url'</span>, <span class="string">'scheme'</span>, <span class="string">'slash'</span>, <span class="string">'host'</span>, <span class="string">'port'</span>, <span class="string">'path'</span>, <span class="string">'query'</span>, <span class="string">'hash'</span>];</span><br><span class="line"><span class="keyword">var</span> blanks = <span class="string">'      '</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; names.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%s:%s%s"</span>, names[i], blanks.substring(names[i].length), result[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> url:   http://www.ora.com:80/goodparts?q#fragment</span></span><br><span class="line"><span class="comment"> scheme:http</span></span><br><span class="line"><span class="comment"> slash: //</span></span><br><span class="line"><span class="comment"> host:  www.ora.com</span></span><br><span class="line"><span class="comment"> port:  80</span></span><br><span class="line"><span class="comment"> path:  goodparts</span></span><br><span class="line"><span class="comment"> query: q</span></span><br><span class="line"><span class="comment"> hash:  fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="正则表达式-验证数字"><a href="#正则表达式-验证数字" class="headerlink" title="正则表达式 - 验证数字"></a>正则表达式 - 验证数字</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_number = <span class="regexp">/^-?\d+(?:\.\d*)?(?:e[+\-]?\d+)?$/i</span>;</span><br><span class="line"><span class="keyword">var</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = parse_number.test(value);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"%s %s a number"</span>, value, result ? <span class="string">"is"</span> : <span class="string">"is not"</span>);</span><br><span class="line">&#125;</span><br><span class="line">isNumber(<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">// 1 is a number</span></span><br><span class="line">isNumber(<span class="string">'number'</span>)</span><br><span class="line"><span class="comment">// number is not a number</span></span><br><span class="line">isNumber(<span class="string">'98.6'</span>)</span><br><span class="line"><span class="comment">// 98.6 is a number</span></span><br><span class="line">isNumber(<span class="string">'132.21.86.100'</span>)</span><br><span class="line"><span class="comment">// 132.21.86.100 is not a number</span></span><br><span class="line">isNumber(<span class="string">'123.45E-67'</span>)</span><br><span class="line"><span class="comment">// 123.45E-67 is a number</span></span><br><span class="line">isNumber(<span class="string">'123.45D-67'</span>)</span><br><span class="line"><span class="comment">//123.45D-67 is not a number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字可能由一个整数部分加上一个可选的负号、一个可选的小数部分和一个可选的指数部分构成</span></span><br></pre></td></tr></table></figure><h5 id="正则表达式中32个ASCII特殊字符集合："><a href="#正则表达式中32个ASCII特殊字符集合：" class="headerlink" title="正则表达式中32个ASCII特殊字符集合："></a>正则表达式中32个ASCII特殊字符集合：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">!"#$%</span></span><br><span class="line"><span class="comment">&amp;'()*</span></span><br><span class="line"><span class="comment">+,-./</span></span><br><span class="line"><span class="comment">:;&lt;=&gt;</span></span><br><span class="line"><span class="comment">?@[\]</span></span><br><span class="line"><span class="comment">^_`&#123;\</span></span><br><span class="line"><span class="comment">&#125;~</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> ascii32 = <span class="regexp">/(?:!|"|#|\$|%|&amp;|'|\(|\)|\*|\+|,|-|\/|:|;|&lt;|=|&gt;|\?|@|\[|\\|]|\^|_|`|\&#123;|\||\&#125;|~)/</span>;</span><br><span class="line"><span class="comment">// 这是其中一种简写方式，不过依旧难以阅读</span></span><br><span class="line"><span class="keyword">var</span> ascii32_short1 = <span class="regexp">/[!-\/:-@\[-`&#123;-~]/</span>;</span><br><span class="line"><span class="comment">// 正则表达式的一个方便之处就是类的求反。如果 [ 后的第一个字符是 ^ ,那么这个类会排除这些特殊字符。</span></span><br><span class="line"><span class="keyword">var</span> not_ascii = <span class="regexp">/[^!-\/:-@\[-`&#123;-~]/</span>;</span><br></pre></td></tr></table></figure><hr><h5 id="糟粕"><a href="#糟粕" class="headerlink" title="糟粕"></a>糟粕</h5><p>javascript 有两组相等运算符：=== 和 !==, 以及它们邪恶的孪生兄弟 == 和 !=。=== 和 !== 这一组运算符会按照你期望的方式工作。如果来两个运算数类型一致并且拥有相同的值，那么 === 返回 <code>true</code>，!== 返回 <code>false</code>。而它们邪恶的孪生兄弟只有在两个运算数类型一致时才会做出正确的判断，如果两个运算数是不同的类型，它们试图去强制转换值的类型。转换的规则复杂且难以记忆。这里有一些有趣的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span> == <span class="string">'0'</span>           <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span>  == <span class="string">''</span>            <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span>  == <span class="string">'0'</span>           <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">'false'</span>    <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">'0'</span>        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>       <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span>  == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">' \t\r\n'</span> == <span class="number">0</span>      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> == 运算符对传递性的缺乏值得我们警惕。我的建议是永远不要使用那对邪恶的孪生兄弟。相反，请始终使用 === 和 !==。如果以上所有比较使用 === 运算符，结果都是<code>false</code>。</p><blockquote><p>传递性是一种编程约定。可以这么理解：对于任意的引用值x、y和z，如果 <code>x == y</code> 和 <code>y == z</code> 为<code>true</code>，那么<code>x == z</code>为<code>true</code>。而javascript中的 == 运算符在某些特例上违背了传递性。</p></blockquote><hr><h5 id="最后-以一个自定义的JSON解析器-结尾吧"><a href="#最后-以一个自定义的JSON解析器-结尾吧" class="headerlink" title="最后 以一个自定义的JSON解析器 结尾吧"></a>最后 以一个自定义的JSON解析器 结尾吧</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个用JavaScript编写JSON解析器的实现方案：</span></span><br><span class="line"><span class="keyword">var</span> json_parse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这是一个能把JSON文本解析成JavaScript数据结构的函数。</span></span><br><span class="line">    <span class="comment">// 它是一个简单的递归降序解析器。</span></span><br><span class="line">    <span class="comment">// 我们在另一个函数中定义此函数，以避免创建全局变量。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> at,         <span class="comment">// 当前字符索引</span></span><br><span class="line">        ch,         <span class="comment">// 当前字符</span></span><br><span class="line">        escapee = &#123;</span><br><span class="line">            <span class="string">'"'</span>     : <span class="string">'"'</span>,</span><br><span class="line">            <span class="string">'\\'</span>    : <span class="string">'\\'</span>,</span><br><span class="line">            <span class="string">'/'</span>     : <span class="string">'/'</span>,</span><br><span class="line">            b       : <span class="string">'b'</span>,</span><br><span class="line">            f       : <span class="string">'\f'</span>,</span><br><span class="line">            n       : <span class="string">'\n'</span>,</span><br><span class="line">            r       : <span class="string">'\r'</span>,</span><br><span class="line">            t       : <span class="string">'\t'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        text,</span><br><span class="line">        error = <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 当某处出错时，调用error。</span></span><br><span class="line">            <span class="keyword">throw</span> &#123;</span><br><span class="line">                name    : <span class="string">'SyntaxError'</span>,</span><br><span class="line">                messsage: m,</span><br><span class="line">                at      : at,</span><br><span class="line">                text    : text</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        next = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果提供了参数 c, 那么检查它是否匹配当前字符。</span></span><br><span class="line">            <span class="keyword">if</span> (c &amp;&amp; c !== ch) &#123;</span><br><span class="line">                error(<span class="string">"Expected '"</span> + c + <span class="string">"' insttead of '"</span> + ch + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取下一个字符。当没有下一个字符时，返回一个空字符串。</span></span><br><span class="line">            ch = text.charAt(at);</span><br><span class="line">            at += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ch;</span><br><span class="line">        &#125;,</span><br><span class="line">        number = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 解析一个数字值。</span></span><br><span class="line">            <span class="keyword">var</span> number,</span><br><span class="line">                string = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'-'</span>) &#123;</span><br><span class="line">                string = <span class="string">'-'</span>;</span><br><span class="line">                next(<span class="string">'-'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                string += ch;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'.'</span>) &#123;</span><br><span class="line">                string += <span class="string">"."</span>;</span><br><span class="line">                <span class="keyword">while</span> (next() &amp;&amp; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                    string += ch;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'e'</span> || ch == <span class="string">'E'</span>) &#123;</span><br><span class="line">                string += ch;</span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">'-'</span> || ch === <span class="string">'+'</span>) &#123;</span><br><span class="line">                    string += ch;</span><br><span class="line">                    next();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                    string += ch;</span><br><span class="line">                    next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            number = +string;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNaN</span>(number)) &#123;</span><br><span class="line">                error(<span class="string">"Bad number"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        string = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 解析一个字符串值。</span></span><br><span class="line">            <span class="keyword">var</span> hex,</span><br><span class="line">                i,</span><br><span class="line">                string = <span class="string">''</span>,</span><br><span class="line">                uffff;</span><br><span class="line">            <span class="comment">// 当解析字符串值时，我们必须找到 " 和 \ 字符。</span></span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'"'</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (next()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ch === <span class="string">'"'</span>) &#123;</span><br><span class="line">                        next();</span><br><span class="line">                        <span class="keyword">return</span> string;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch === <span class="string">'\\'</span>) &#123;</span><br><span class="line">                        next();</span><br><span class="line">                        <span class="keyword">if</span> (ch === <span class="string">'u'</span>) &#123;</span><br><span class="line">                            uffff = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">                                hex = <span class="built_in">parseInt</span>(next(), <span class="number">16</span>);</span><br><span class="line">                                <span class="keyword">if</span> (!<span class="built_in">isFinite</span>(hex)) &#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                uffff = uffff * <span class="number">16</span> + hex;</span><br><span class="line">                            &#125;</span><br><span class="line">                            string += <span class="built_in">String</span>.fromCharCode(uffff);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> escapee[ch] === <span class="string">'string'</span>) &#123;</span><br><span class="line">                            string += escapee[ch];</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        string += ch;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            error(<span class="string">"Bad string"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        white = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 跳过空白</span></span><br><span class="line">            <span class="keyword">while</span> (ch &amp;&amp; ch &lt;= <span class="string">' '</span>) &#123;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        word = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// true, false 或者 null</span></span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                    next(<span class="string">'t'</span>);</span><br><span class="line">                    next(<span class="string">'r'</span>);</span><br><span class="line">                    next(<span class="string">'u'</span>);</span><br><span class="line">                    next(<span class="string">'e'</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">                    next(<span class="string">'f'</span>);</span><br><span class="line">                    next(<span class="string">'a'</span>);</span><br><span class="line">                    next(<span class="string">'l'</span>);</span><br><span class="line">                    next(<span class="string">'s'</span>);</span><br><span class="line">                    next(<span class="string">'e'</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line">                    next(<span class="string">'n'</span>);</span><br><span class="line">                    next(<span class="string">'u'</span>);</span><br><span class="line">                    next(<span class="string">'l'</span>);</span><br><span class="line">                    next(<span class="string">'l'</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            error(<span class="string">"Unexpected '"</span> + ch + <span class="string">"'"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        value,  <span class="comment">// 值函数的占位符。</span></span><br><span class="line">        array = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 解析一个数组值。</span></span><br><span class="line">            <span class="keyword">var</span> array = [];</span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'['</span>) &#123;</span><br><span class="line">                white();</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">']'</span>) &#123;</span><br><span class="line">                    next(<span class="string">']'</span>);</span><br><span class="line">                    <span class="keyword">return</span> array;   <span class="comment">// 空数组</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (ch) &#123;</span><br><span class="line">                    array.push(value());</span><br><span class="line">                    white();</span><br><span class="line">                    <span class="keyword">if</span> (ch === <span class="string">"]"</span>) &#123;</span><br><span class="line">                        next(<span class="string">']'</span>);</span><br><span class="line">                        <span class="keyword">return</span> array;</span><br><span class="line">                    &#125;</span><br><span class="line">                    next(<span class="string">','</span>);</span><br><span class="line">                    white();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            error(<span class="string">"Bad array"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        object = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 解析一个对象值</span></span><br><span class="line">            <span class="keyword">var</span> key,</span><br><span class="line">                object = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span>(ch === <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                next(<span class="string">'&#123;'</span>);</span><br><span class="line">                white();</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">"&#125;"</span>) &#123;</span><br><span class="line">                    next(<span class="string">'&#125;'</span>);</span><br><span class="line">                    <span class="keyword">return</span> object;  <span class="comment">// 空对象</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (ch) &#123;</span><br><span class="line">                    key = string();</span><br><span class="line">                    white();</span><br><span class="line">                    next(<span class="string">":"</span>);</span><br><span class="line">                    object[key] = value();</span><br><span class="line">                    white();</span><br><span class="line">                    <span class="keyword">if</span>(ch === <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                        next(<span class="string">'&#125;'</span>);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                    next(<span class="string">","</span>);</span><br><span class="line">                    white();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            error(<span class="string">"Bad object"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 解析一个JSON值。它可以是对象、数组、字符串、数字或一个词。</span></span><br><span class="line">        white();</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                <span class="keyword">return</span> object();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                <span class="keyword">return</span> array();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                <span class="keyword">return</span> string();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> number();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ? number() : word() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回json_parse 函数。它能访问上述所有的函数和变量。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">source, reviver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result;</span><br><span class="line">        text = source;</span><br><span class="line">        at = <span class="number">0</span>;</span><br><span class="line">        ch = <span class="string">' '</span>;</span><br><span class="line">        result = value();</span><br><span class="line">        white();</span><br><span class="line">        <span class="keyword">if</span> (ch) &#123;</span><br><span class="line">            error(<span class="string">"Syntax error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果存在reviver 函数，我们就递归地对这个新结构调用walk函数，</span></span><br><span class="line">        <span class="comment">// 开始时先创建一个临时的启动对象，并以一个空字符串作为键名保存结果，</span></span><br><span class="line">        <span class="comment">// 然后传递每个键值对给reviver函数去处理可能存在的转换。</span></span><br><span class="line">        <span class="comment">// 如果没有reviver函数，我们就简单地返回这个结果。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> reviver === <span class="string">'function'</span> ?</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">holder, key</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> k, v, value = holder[key];</span><br><span class="line">                <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (k <span class="keyword">in</span> value) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(value, k)) &#123;</span><br><span class="line">                            v = walk(value, k);</span><br><span class="line">                            <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                                value[k] = v;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">delete</span> value[k];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> reviver.call(holder, key, value);</span><br><span class="line">            &#125;(&#123;<span class="string">''</span>: result&#125;, <span class="string">''</span>)</span><br><span class="line">            : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h2 id="This-is-the-end"><a href="#This-is-the-end" class="headerlink" title="This is the end."></a>This is the end.</h2><p>正文部分到此结束。<br>第一次写读书笔记，一是加深自己的印象，二来方便以后查阅，毕竟纸张没有搜索功能。<br>如果你也喜欢这篇文章欢迎转载，但本文代码版权属于《JavaScript 语言精粹》，小部分代码扩充是为了演示代码效果。</p>]]></content>
    
    <summary type="html">
    
      第一次写读书笔记，一是加深自己的印象，二来方便以后查阅，毕竟纸张没有搜索功能。如果你也喜欢这篇文章欢迎转载，但本文代码版权属于《JavaScript语言精粹》，小部分代码扩充是为了演示代码效果。
    
    </summary>
    
      <category term="Notes" scheme="https://mrzzcn.github.io/categories/Notes/"/>
    
    
      <category term="Javascript" scheme="https://mrzzcn.github.io/tags/Javascript/"/>
    
      <category term="Douglas-Crockford" scheme="https://mrzzcn.github.io/tags/Douglas-Crockford/"/>
    
      <category term="最佳实践" scheme="https://mrzzcn.github.io/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
